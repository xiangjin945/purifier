; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --thumb --list --debug -c --asm --interleave -o.\obj\bim_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bim_uart.d --cpu=ARM9E --apcs=interwork -O3 --diag_suppress=9931 -I.\config -I.\app -I..\..\libs -I..\..\sdk\plactform\core_modules\src -I..\..\sdk\plactform\arch -I..\..\sdk\plactform\arch\compiler -I..\..\sdk\plactform\arch\ll -I..\..\sdk\plactform\core_modules\common\api -I..\..\sdk\plactform\arch\boot -I..\..\sdk\plactform\core_modules\dbg\api -I..\..\sdk\plactform\core_modules\rf\api -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\plactform\arch\main -I..\..\sdk\plactform\core_modules\util -I..\..\sdk\plactform\driver\pwm -I..\..\sdk\plactform\driver\adc -I..\..\sdk\plactform\driver\audio -I..\..\sdk\plactform\driver\wdt -I..\..\sdk\plactform\driver\rtc -I..\..\sdk\plactform\driver\i2c -I..\..\sdk\plactform\driver\utc -I..\..\sdk\plactform\driver\ir -I..\..\sdk\plactform\driver\spi -I..\..\sdk\plactform\driver\plf -I..\..\sdk\plactform\driver\counter -I..\..\sdk\plactform\driver\gpio -I..\..\sdk\plactform\driver\intcntl -I..\..\sdk\plactform\driver\icu -I..\..\sdk\plactform\driver\intc -I..\..\sdk\plactform\driver\flash -I..\..\sdk\plactform\driver\timer -I..\..\sdk\plactform\driver\reg -I..\..\sdk\plactform\driver\uart -I..\..\sdk\plactform\driver\emi -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\src -I..\..\sdk\plactform\reg -I..\..\sdk\plactform\driver\syscntl -I..\..\sdk\plactform\rom\hci -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\ble_stack\inc -I..\..\sdk\ble_stack\inc\hci -I..\..\sdk\ble_stack\inc\h4tl -I..\..\sdk\ble_stack\inc\ke -I..\..\sdk\ble_stack\inc\nvds -I..\..\sdk\ble_stack\inc\ea -I..\..\sdk\ble_stack\inc\em -I..\..\sdk\ble_stack\inc\ahi -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapc -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapm -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpc -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\atts -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattm -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cc -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cm -I..\..\sdk\ble_stack\inc\ble\ll\em -I..\..\sdk\ble_stack\inc\ble\ll\llc -I..\..\sdk\ble_stack\inc\ble\ll\lld -I..\..\sdk\ble_stack\inc\ble\ll\llm -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\inc\ble\hl\gap -I..\..\sdk\ble_stack\inc\ble\hl\gatt -I..\..\sdk\ble_stack\com\prf -I..\..\sdk\ble_stack\com\profiles\dis\diss\src -I..\..\sdk\ble_stack\com\profiles\bas\bass\src -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\api -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\src -I..\..\sdk\ble_stack\com\profiles\ancs -I..\..\sdk\ble_stack\com\profiles\FCC0\api -I..\..\sdk\ble_stack\com\profiles\FCC0\src -I..\..\sdk\ble_stack\com\profiles\FCC0\util -I..\..\sdk\ble_stack\com\profiles\FEE0\api -I..\..\sdk\ble_stack\com\profiles\FEE0\src -I..\..\sdk\ble_stack\com\profiles\hogp -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\api -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\src -I..\..\libs -I..\..\sdk\ble_stack\com\profiles\wechat\api -I..\..\sdk\ble_stack\com\profiles\wechat\src -I.\wechat -I..\..\sdk\ble_stack\com\profiles\bas\bass -I..\..\sdk\ble_stack\com\profiles\bas\bass\api -I..\..\sdk\ble_stack\com\profiles\dis\diss -I..\..\sdk\ble_stack\com\profiles\dis\diss\api -I..\..\sdk\ble_stack\com\profiles\FFF0\api -I..\..\sdk\ble_stack\com\profiles\FFF0 -I..\..\sdk\ble_stack\com\profiles\oad\api -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=532 --omf_browse=.\obj\bim_uart.crf app\bim_uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bim_uart_printf_null PROC
;;;52     
;;;53     int bim_uart_printf_null(const char *fmt,...)
000000  2000              MOVS     r0,#0
;;;54     {
;;;55     	return 0;
;;;56     }
000002  4770              BX       lr
;;;57     
                          ENDP

                  uart_send PROC
;;;80     #endif
;;;81     void uart_send(unsigned char *buff, int len)
000004  4afb              LDR      r2,|L1.1012|
;;;82     {
;;;83     	while (len--)
;;;84     	{
;;;85     		while(!UART_TX_WRITE_READY);
;;;86     		REG_APB3_UART_PORT = *buff++ ;
000006  e005              B        |L1.20|
                  |L1.8|
000008  6893              LDR      r3,[r2,#8]            ;85
00000a  02db              LSLS     r3,r3,#11             ;85
00000c  d5fc              BPL      |L1.8|
00000e  7803              LDRB     r3,[r0,#0]
000010  60d3              STR      r3,[r2,#0xc]
000012  1c40              ADDS     r0,r0,#1
                  |L1.20|
000014  1e49              SUBS     r1,r1,#1
000016  d2f7              BCS      |L1.8|
;;;87     	}
;;;88     }
000018  4770              BX       lr
;;;89     #if 0
                          ENDP

                  bim_uart_write PROC
;;;102    #endif
;;;103    void bim_uart_write( char *buff)
00001a  4770              BX       lr
;;;104    {
;;;105    #if 0
;;;106    	uint8_t len = strlen((char*)buff);
;;;107    	while (len--)
;;;108    		bim_uart_send_byte(*buff++);
;;;109    #endif
;;;110    }
;;;111    
                          ENDP

                  bim_printf PROC
;;;114    
;;;115    void bim_printf(char *title, uint32_t v, uint8_t radix)
00001c  4770              BX       lr
;;;116    {
;;;117    #if 0
;;;118    	uint8_t	tmpLen;
;;;119    	char buf[128];
;;;120    	uint32_t err;
;;;121    
;;;122    	tmpLen = strlen( (char*)title);
;;;123    	memcpy( buf, title, tmpLen );
;;;124    	err = (uint32_t)(v);
;;;125    	itoa_my( err, &buf[tmpLen], radix);
;;;126    	bim_uart_write(&buf[0]);
;;;127    #endif
;;;128    }
;;;129    
                          ENDP

                  bim_uart_init PROC
;;;130    
;;;131    void bim_uart_init(uint32_t baudrate)
00001e  2001              MOVS     r0,#1
;;;132    {
;;;133    
;;;134    	unsigned int baud_divisor ;
;;;135    	REG_AHB0_ICU_UARTCLKCON   &= ~(0x1 << 0) ;  // Enable Uart's Clocks
000020  05c0              LSLS     r0,r0,#23
000022  68c1              LDR      r1,[r0,#0xc]
000024  0849              LSRS     r1,r1,#1
000026  0049              LSLS     r1,r1,#1
000028  60c1              STR      r1,[r0,#0xc]
;;;136    	baud_divisor = 0x8a;//uart_clks/baud_rate ;
;;;137    	baud_divisor = baud_divisor-1 ;
;;;138    	REG_APB3_UART_CFG  = (baud_divisor<<8) +
00002a  49f3              LDR      r1,|L1.1016|
00002c  48f1              LDR      r0,|L1.1012|
00002e  6001              STR      r1,[r0,#0]
;;;139    	                     (stop_bits   <<7) +
;;;140    	                     //(parity_mode <<6) +
;;;141    	                     //(parity_en   <<5) +
;;;142    	                     (data_len    <<3) +
;;;143    	                     (irda_mode   <<2) +
;;;144    	                     (uart_rx_en  <<1) +
;;;145    	                     uart_tx_en       ;
;;;146    	REG_APB3_UART_FIFO_CFG  = 0x00001001 ;  // Set Fifo threshold 8
000030  49f2              LDR      r1,|L1.1020|
000032  6041              STR      r1,[r0,#4]
;;;147    	REG_APB3_UART_INT_ENABLE = ((0x01 << 1) | (0x01 << 6) | (0x01 << 7));  //need read / stop end /rxd wake up
000034  21c2              MOVS     r1,#0xc2
000036  6101              STR      r1,[r0,#0x10]
;;;148    	REG_APB3_UART_FLOW_CFG  = 0x00000000 ;  // No Flow Control
000038  2100              MOVS     r1,#0
00003a  6181              STR      r1,[r0,#0x18]
;;;149    	REG_APB3_UART_WAKE_CFG  =  ((0x01 << 0 )| (0x01 << 20) |  (0x01 << 21)| (0x01 << 22));  // No Wake Control
00003c  49f0              LDR      r1,|L1.1024|
00003e  61c1              STR      r1,[r0,#0x1c]
;;;150    
;;;151    	REG_APB5_GPIOA_CFG  &= ~((0x3<<BIT_GPIO_PULL_UP)  + (0x3<<BIT_GPIO_PERI_EN));
000040  48f0              LDR      r0,|L1.1028|
000042  6801              LDR      r1,[r0,#0]
000044  4af0              LDR      r2,|L1.1032|
000046  4011              ANDS     r1,r1,r2
000048  6001              STR      r1,[r0,#0]
;;;152    	REG_APB5_GPIOA_CFG  |= ((0x3<<BIT_GPIO_PULL_UP));
00004a  6802              LDR      r2,[r0,#0]
00004c  2103              MOVS     r1,#3
00004e  0409              LSLS     r1,r1,#16
000050  430a              ORRS     r2,r2,r1
000052  6002              STR      r2,[r0,#0]
;;;153    	REG_APB5_GPIOA_CFG  |=   (0x3<<BIT_GPIO_OUT_EN_N);
000054  6802              LDR      r2,[r0,#0]
000056  120b              ASRS     r3,r1,#8
000058  431a              ORRS     r2,r2,r3
00005a  6002              STR      r2,[r0,#0]
;;;154    
;;;155    	REG_APB5_GPIOA_DATA &= ~ (0x3<<BIT_GPIO_INPUT_EN);
00005c  6842              LDR      r2,[r0,#4]
00005e  438a              BICS     r2,r2,r1
000060  6042              STR      r2,[r0,#4]
;;;156    
;;;157    }
000062  4770              BX       lr
;;;158    
                          ENDP

                  bim_uart_deinit PROC
;;;161    #if 1 //
;;;162    void bim_uart_deinit( void )
000064  2001              MOVS     r0,#1
;;;163    {
;;;164    	REG_AHB0_ICU_UARTCLKCON   = 0x1 ;  // disable Uart's Clocks
000066  05c1              LSLS     r1,r0,#23
000068  60c8              STR      r0,[r1,#0xc]
;;;165    
;;;166    	REG_APB5_GPIOA_CFG  &= ~((0x3<<BIT_GPIO_PULL_UP)  + (0x3<<BIT_GPIO_PERI_EN));
00006a  48e6              LDR      r0,|L1.1028|
00006c  6801              LDR      r1,[r0,#0]
00006e  4ae6              LDR      r2,|L1.1032|
000070  4011              ANDS     r1,r1,r2
000072  6001              STR      r1,[r0,#0]
;;;167    	REG_APB5_GPIOA_CFG  |= ((0x3<<BIT_GPIO_PERI_EN));
000074  6801              LDR      r1,[r0,#0]
000076  2203              MOVS     r2,#3
000078  4311              ORRS     r1,r1,r2
00007a  6001              STR      r1,[r0,#0]
;;;168    
;;;169    }
00007c  4770              BX       lr
;;;170    
                          ENDP

                  bim_uart_isr PROC
;;;179    
;;;180    void bim_uart_isr(void)
00007e  b5f0              PUSH     {r4-r7,lr}
;;;181    {
;;;182    	unsigned int IntStat;
;;;183    
;;;184    	IntStat = REG_APB3_UART_INT_STAT;
000080  48dc              LDR      r0,|L1.1012|
000082  6942              LDR      r2,[r0,#0x14]
;;;185    	if(IntStat & 0x42)
000084  2142              MOVS     r1,#0x42
000086  420a              TST      r2,r1
;;;186    	{
;;;187    		while((REG_APB3_UART_FIFO_STAT & (0x01 << 21)))
;;;188    		{
;;;189    			bim_uart_rx_buf[uart_buff_write++] = ((REG_APB3_UART_PORT>>8)&0xff);
000088  49e0              LDR      r1,|L1.1036|
00008a  d011              BEQ      |L1.176|
00008c  4de0              LDR      r5,|L1.1040|
;;;190    			if( BIM_UART0_RX_FIFO_MAX_COUNT == uart_buff_write )
00008e  4ee1              LDR      r6,|L1.1044|
000090  2700              MOVS     r7,#0
                  |L1.146|
000092  6883              LDR      r3,[r0,#8]            ;187
000094  029b              LSLS     r3,r3,#10             ;187
000096  d50b              BPL      |L1.176|
000098  68c3              LDR      r3,[r0,#0xc]          ;189
00009a  0a1c              LSRS     r4,r3,#8              ;189
00009c  898b              LDRH     r3,[r1,#0xc]          ;189  ; uart_buff_write
00009e  54ec              STRB     r4,[r5,r3]            ;189
0000a0  1c5b              ADDS     r3,r3,#1              ;189
0000a2  041b              LSLS     r3,r3,#16             ;189
0000a4  0c1b              LSRS     r3,r3,#16             ;189
0000a6  42b3              CMP      r3,r6
0000a8  818b              STRH     r3,[r1,#0xc]          ;189
0000aa  d1f2              BNE      |L1.146|
;;;191    			{
;;;192    				uart_buff_write = 0;
0000ac  818f              STRH     r7,[r1,#0xc]
0000ae  e7f0              B        |L1.146|
                  |L1.176|
;;;193    			}
;;;194    		}
;;;195    
;;;196    	}
;;;197    	REG_APB3_UART_INT_STAT=IntStat;
0000b0  6142              STR      r2,[r0,#0x14]
;;;198    }
0000b2  bdf0              POP      {r4-r7,pc}
;;;199    
                          ENDP

                  operate_flash_cmd_response PROC
;;;629    
;;;630    void operate_flash_cmd_response( uint8_t cmd, uint8_t status,uint16_t length, uint8_t *payload )
0000b4  b570              PUSH     {r4-r6,lr}
;;;631    {
0000b6  4cd8              LDR      r4,|L1.1048|
0000b8  44a5              ADD      sp,sp,r4
0000ba  000c              MOVS     r4,r1
;;;632    	uint8_t response_buff[4200];
;;;633    	uint16_t    i;
;;;634    
;;;635    	if(length<2)
0000bc  2a02              CMP      r2,#2
0000be  d323              BCC      |L1.264|
;;;636    		return;
;;;637    
;;;638    	response_buff[0]=0x04;
0000c0  2504              MOVS     r5,#4
0000c2  4669              MOV      r1,sp
0000c4  700d              STRB     r5,[r1,#0]
;;;639    	response_buff[1]=0x0e;
0000c6  250e              MOVS     r5,#0xe
0000c8  704d              STRB     r5,[r1,#1]
;;;640    	response_buff[2]=0xff;
0000ca  25ff              MOVS     r5,#0xff
0000cc  708d              STRB     r5,[r1,#2]
;;;641    	response_buff[3]=0x01;
0000ce  2501              MOVS     r5,#1
0000d0  70cd              STRB     r5,[r1,#3]
;;;642    	response_buff[4]=0xe0;
0000d2  25e0              MOVS     r5,#0xe0
0000d4  710d              STRB     r5,[r1,#4]
;;;643    	response_buff[5]=0xfc;
0000d6  25fc              MOVS     r5,#0xfc
0000d8  714d              STRB     r5,[r1,#5]
;;;644    	response_buff[6]=0xf4;
0000da  25f4              MOVS     r5,#0xf4
0000dc  718d              STRB     r5,[r1,#6]
;;;645    
;;;646    	response_buff[7]=(length&0xff);
;;;647    	response_buff[8]=length>>8;
0000de  0a15              LSRS     r5,r2,#8
0000e0  71ca              STRB     r2,[r1,#7]            ;646
0000e2  720d              STRB     r5,[r1,#8]
;;;648    	response_buff[9]=cmd;
0000e4  7248              STRB     r0,[r1,#9]
;;;649    	response_buff[10]=status;
0000e6  728c              STRB     r4,[r1,#0xa]
;;;650    
;;;651    
;;;652    	for(i=0; i<(length-2); i++)
0000e8  2100              MOVS     r1,#0
0000ea  1e94              SUBS     r4,r2,#2
0000ec  4668              MOV      r0,sp                 ;632
0000ee  e005              B        |L1.252|
                  |L1.240|
;;;653    		response_buff[11+i]=payload[i];
0000f0  5c5d              LDRB     r5,[r3,r1]
0000f2  1846              ADDS     r6,r0,r1
0000f4  1c49              ADDS     r1,r1,#1
0000f6  0409              LSLS     r1,r1,#16             ;652
0000f8  0c09              LSRS     r1,r1,#16             ;652
0000fa  72f5              STRB     r5,[r6,#0xb]
                  |L1.252|
0000fc  42a1              CMP      r1,r4                 ;652
0000fe  dbf7              BLT      |L1.240|
;;;654    
;;;655    	uart_send(response_buff,length+9);
000100  0011              MOVS     r1,r2
000102  3109              ADDS     r1,r1,#9
000104  f7fffffe          BL       uart_send
                  |L1.264|
;;;656    
;;;657    }
000108  4cbc              LDR      r4,|L1.1020|
00010a  3467              ADDS     r4,r4,#0x67
00010c  44a5              ADD      sp,sp,r4
00010e  bd70              POP      {r4-r6,pc}
;;;658    
                          ENDP

                  cmd_response PROC
;;;607    
;;;608    void cmd_response( uint8_t cmd, uint8_t length, uint8_t *payload )
000110  b57f              PUSH     {r0-r6,lr}
;;;609    {
;;;610    	uint8_t response_buff[16],i;
;;;611    
;;;612    	if(length<4)
000112  2904              CMP      r1,#4
000114  d31c              BCC      |L1.336|
;;;613    		return;
;;;614    
;;;615    	response_buff[0]=0x04;
000116  2404              MOVS     r4,#4
000118  466b              MOV      r3,sp
00011a  701c              STRB     r4,[r3,#0]
;;;616    	response_buff[1]=0x0e;
00011c  240e              MOVS     r4,#0xe
00011e  705c              STRB     r4,[r3,#1]
;;;617    	response_buff[2]=length;
;;;618    	response_buff[3]=0x01;
000120  2401              MOVS     r4,#1
000122  7099              STRB     r1,[r3,#2]            ;617
000124  70dc              STRB     r4,[r3,#3]
;;;619    	response_buff[4]=0xe0;
000126  24e0              MOVS     r4,#0xe0
000128  711c              STRB     r4,[r3,#4]
;;;620    	response_buff[5]=0xfc;
00012a  24fc              MOVS     r4,#0xfc
00012c  715c              STRB     r4,[r3,#5]
;;;621    	response_buff[6]=cmd;
00012e  7198              STRB     r0,[r3,#6]
;;;622    
;;;623    	for(i=0; i<length-4; i++)
000130  2000              MOVS     r0,#0
000132  1f0b              SUBS     r3,r1,#4
000134  466c              MOV      r4,sp                 ;610
000136  e005              B        |L1.324|
                  |L1.312|
;;;624    		response_buff[7+i]=payload[i];
000138  5c15              LDRB     r5,[r2,r0]
00013a  1826              ADDS     r6,r4,r0
00013c  1c40              ADDS     r0,r0,#1
00013e  0600              LSLS     r0,r0,#24             ;623
000140  0e00              LSRS     r0,r0,#24             ;623
000142  71f5              STRB     r5,[r6,#7]
                  |L1.324|
000144  4298              CMP      r0,r3                 ;623
000146  dbf7              BLT      |L1.312|
;;;625    
;;;626    	uart_send(response_buff,length+3);
000148  0020              MOVS     r0,r4
00014a  1cc9              ADDS     r1,r1,#3
00014c  f7fffffe          BL       uart_send
                  |L1.336|
;;;627    
;;;628    }
000150  bd7f              POP      {r0-r6,pc}
;;;629    
                          ENDP

                  bim_delay_ms PROC
;;;502    
;;;503    void bim_delay_ms(unsigned int tt)
000152  b50c              PUSH     {r2,r3,lr}
;;;504    {
000154  2100              MOVS     r1,#0
;;;505    	volatile unsigned int i, j;
;;;506    	while(tt--)
;;;507    	{
;;;508    		for (j = 0; j < 1000/10; j++)
000156  e00b              B        |L1.368|
                  |L1.344|
000158  9101              STR      r1,[sp,#4]
                  |L1.346|
;;;509    		{
;;;510    			for (i = 0; i < 12; i++)
00015a  9100              STR      r1,[sp,#0]
                  |L1.348|
00015c  9a00              LDR      r2,[sp,#0]
00015e  1c52              ADDS     r2,r2,#1
000160  2a0c              CMP      r2,#0xc
000162  9200              STR      r2,[sp,#0]
000164  d3fa              BCC      |L1.348|
000166  9a01              LDR      r2,[sp,#4]            ;508
000168  1c52              ADDS     r2,r2,#1              ;508
00016a  2a64              CMP      r2,#0x64              ;508
00016c  9201              STR      r2,[sp,#4]            ;508
00016e  d3f4              BCC      |L1.346|
                  |L1.368|
000170  1e40              SUBS     r0,r0,#1              ;508
000172  d2f1              BCS      |L1.344|
;;;511    			{
;;;512    				;
;;;513    			}
;;;514    		}
;;;515    	}
;;;516    }
000174  bd0c              POP      {r2,r3,pc}
;;;517    
                          ENDP

                  make_crc32 PROC
;;;493    
;;;494    uint32_t make_crc32(uint32_t crc,unsigned char *string,uint32_t size)
000176  b510              PUSH     {r4,lr}
;;;495    {
;;;496    	while(size--)
;;;497    	{
;;;498    		crc = (crc >> 8)^(crc32_table[(crc^*string++)&0xff]);
000178  4ba8              LDR      r3,|L1.1052|
00017a  e007              B        |L1.396|
                  |L1.380|
00017c  780c              LDRB     r4,[r1,#0]
00017e  4044              EORS     r4,r4,r0
000180  0624              LSLS     r4,r4,#24
000182  0da4              LSRS     r4,r4,#22
000184  591c              LDR      r4,[r3,r4]
000186  0a00              LSRS     r0,r0,#8
000188  4060              EORS     r0,r0,r4
00018a  1c49              ADDS     r1,r1,#1
                  |L1.396|
00018c  1e52              SUBS     r2,r2,#1
00018e  d2f5              BCS      |L1.380|
;;;499    	}
;;;500    	return crc;
;;;501    }
000190  bd10              POP      {r4,pc}
;;;502    
                          ENDP

                  make_crc32_table PROC
;;;468    uint32_t crc32_table[256];
;;;469    int make_crc32_table(void)
000192  b530              PUSH     {r4,r5,lr}
;;;470    {
;;;471    	uint32_t c;
;;;472    	int i = 0;
;;;473    	int bit = 0;
;;;474    	for(i = 0; i < 256; i++)
;;;475    	{
;;;476    		c = (uint32_t)i;
;;;477    		for(bit = 0; bit < 8; bit++)
;;;478    		{
;;;479    			if(c&1)
;;;480    			{
;;;481    				c = (c>>1)^(0xEDB88320);
000194  4ba2              LDR      r3,|L1.1056|
;;;482    			}
;;;483    			else
;;;484    			{
;;;485    				c = c >> 1;
;;;486    			}
;;;487    		}
;;;488    		crc32_table[i] = c;
000196  4ca1              LDR      r4,|L1.1052|
000198  2100              MOVS     r1,#0                 ;472
                  |L1.410|
00019a  0008              MOVS     r0,r1                 ;476
00019c  2200              MOVS     r2,#0                 ;477
                  |L1.414|
00019e  07c5              LSLS     r5,r0,#31             ;479
0001a0  d002              BEQ      |L1.424|
0001a2  0840              LSRS     r0,r0,#1              ;481
0001a4  4058              EORS     r0,r0,r3              ;481
0001a6  e000              B        |L1.426|
                  |L1.424|
0001a8  0840              LSRS     r0,r0,#1              ;485
                  |L1.426|
0001aa  1c52              ADDS     r2,r2,#1              ;485
0001ac  2a08              CMP      r2,#8                 ;477
0001ae  dbf6              BLT      |L1.414|
0001b0  008a              LSLS     r2,r1,#2              ;477
0001b2  1c49              ADDS     r1,r1,#1
0001b4  29ff              CMP      r1,#0xff              ;474
0001b6  50a0              STR      r0,[r4,r2]
0001b8  ddef              BLE      |L1.410|
;;;489    
;;;490    	}
;;;491    	return 0;
0001ba  2000              MOVS     r0,#0
;;;492    }
0001bc  bd30              POP      {r4,r5,pc}
;;;493    
                          ENDP

                  uart_cmd_dispath PROC
;;;519    
;;;520    void uart_cmd_dispath(uint8_t *buff,uint8_t len)
0001be  b5f0              PUSH     {r4-r7,lr}
;;;521    {
0001c0  0004              MOVS     r4,r0
;;;522    	uint8_t payload[16];
;;;523    	uint8_t read_data[256];
;;;524    	uint32_t  calcuCrc=0xffffffff;
;;;525    
;;;526    	uint32_t read_flash_addr;
;;;527    	uint32_t uart_clk_div,baudrate_set;
;;;528    	uint32_t crc_start_addr,crc_end_addr;
;;;529    
;;;530    
;;;531    	switch(buff[0])
0001c2  7800              LDRB     r0,[r0,#0]
0001c4  2600              MOVS     r6,#0                 ;524
;;;532    	{
;;;533    	case LINK_CHECK_CMD:
;;;534    		uart_download_status=1;
0001c6  4f91              LDR      r7,|L1.1036|
0001c8  43f6              MVNS     r6,r6                 ;524
0001ca  2501              MOVS     r5,#1
0001cc  280f              CMP      r0,#0xf               ;531
0001ce  b0c5              SUB      sp,sp,#0x114          ;521
0001d0  d061              BEQ      |L1.662|
0001d2  dc0a              BGT      |L1.490|
0001d4  2800              CMP      r0,#0                 ;531
0001d6  d014              BEQ      |L1.514|
0001d8  280e              CMP      r0,#0xe               ;531
0001da  d11c              BNE      |L1.534|
;;;535    		payload[0]=0x00;
;;;536    		cmd_response(LINK_CHECK_CMD+1,5,payload);
;;;537    		erase_fenable=1;
;;;538    		break;
;;;539    
;;;540    	case CRC_CHECK_CMD:
;;;541    		crc_start_addr = ( buff[1]|(buff[2]<<8)|(buff[3]<<16)|(buff[4]<<24) );
;;;542    		crc_end_addr = ( buff[5]|(buff[6]<<8)|(buff[7]<<16)|(buff[8]<<24) );
;;;543    
;;;544    		//bim_fflash_wp_ALL();
;;;545    
;;;546    		make_crc32_table();
;;;547    
;;;548    
;;;549    		read_flash_addr=crc_start_addr;
;;;550    
;;;551    		for(uint16_t i = 0; i < (crc_end_addr-crc_start_addr+1)/256; i++)
;;;552    		{
;;;553    			bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_flash_addr/4, 256, read_data);
;;;554    
;;;555    			calcuCrc = make_crc32(calcuCrc,read_data,256);
;;;556    
;;;557    			read_flash_addr+= 256;
;;;558    		}
;;;559    		payload[0]= calcuCrc;
;;;560    		payload[1]= calcuCrc>>8;
;;;561    		payload[2]= calcuCrc>>16;
;;;562    		payload[3]= calcuCrc>>24;
;;;563    		cmd_response(CRC_CHECK_CMD,8,payload);
;;;564    
;;;565    		break;
;;;566    	case STAY_ROM_CMD:
;;;567    		uart_download_status=1;
;;;568    		payload[0]=buff[1];
;;;569    		cmd_response(STAY_ROM_CMD,5,payload);
;;;570    
;;;571    		break;
;;;572    	case SET_BAUDRATE_CMD:
;;;573    
;;;574    		baudrate_set =  buff[1]|(buff[2]<<8)|(buff[3]<<16)|(buff[4]<<24) ;
;;;575    
;;;576    		uart_clk_div    = 16000000/baudrate_set;
;;;577    
;;;578    		REG_APB3_UART_CFG  = ((uart_clk_div-1)<<8) +
;;;579    		                     (stop_bits   <<7) +
;;;580    		                     (data_len    <<3) +
;;;581    		                     (irda_mode   <<2) +
;;;582    		                     (uart_rx_en  <<1) +
;;;583    		                     uart_tx_en;
;;;584    
;;;585    
;;;586    
;;;587    		bim_delay_ms(buff[5]*2);
;;;588    
;;;589    		payload[0]=buff[1];
;;;590    		payload[1]=buff[2];
;;;591    		payload[2]=buff[3];
;;;592    		payload[3]=buff[4];
;;;593    		payload[4]=buff[5];
;;;594    		cmd_response(SET_BAUDRATE_CMD,9,payload);
;;;595    		bim_icu_init(ICU_CLK_64M);
;;;596    		break;
;;;597    	case SET_RESET_CMD:
;;;598    		if(buff[1]==0xa5)
0001dc  7860              LDRB     r0,[r4,#1]
0001de  28a5              CMP      r0,#0xa5
0001e0  d119              BNE      |L1.534|
;;;599    		{
;;;600    			bim_wdt_enable(0X10);
0001e2  2010              MOVS     r0,#0x10
0001e4  f7fffffe          BL       bim_wdt_enable
                  |L1.488|
;;;601    			while(1);
0001e8  e7fe              B        |L1.488|
                  |L1.490|
0001ea  2810              CMP      r0,#0x10              ;531
0001ec  d015              BEQ      |L1.538|
0001ee  28aa              CMP      r0,#0xaa              ;531
0001f0  d111              BNE      |L1.534|
0001f2  703d              STRB     r5,[r7,#0]            ;567
0001f4  7860              LDRB     r0,[r4,#1]            ;568
0001f6  4669              MOV      r1,sp                 ;568
0001f8  466a              MOV      r2,sp                 ;569
0001fa  7008              STRB     r0,[r1,#0]            ;568
0001fc  2105              MOVS     r1,#5                 ;569
0001fe  20aa              MOVS     r0,#0xaa              ;569
000200  e046              B        |L1.656|
                  |L1.514|
000202  2000              MOVS     r0,#0                 ;535
000204  4669              MOV      r1,sp                 ;535
000206  703d              STRB     r5,[r7,#0]            ;534
000208  7008              STRB     r0,[r1,#0]            ;535
00020a  2105              MOVS     r1,#5                 ;536
00020c  2001              MOVS     r0,#1                 ;536
00020e  466a              MOV      r2,sp                 ;536
000210  f7fffffe          BL       cmd_response
000214  70bd              STRB     r5,[r7,#2]            ;537
                  |L1.534|
;;;602    		}
;;;603    
;;;604    		break;
;;;605    	}
;;;606    }
000216  b045              ADD      sp,sp,#0x114
000218  bdf0              POP      {r4-r7,pc}
                  |L1.538|
00021a  78a0              LDRB     r0,[r4,#2]            ;541
00021c  7865              LDRB     r5,[r4,#1]            ;541
00021e  7921              LDRB     r1,[r4,#4]            ;541
000220  0200              LSLS     r0,r0,#8              ;541
000222  4305              ORRS     r5,r5,r0              ;541
000224  78e0              LDRB     r0,[r4,#3]            ;541
000226  0609              LSLS     r1,r1,#24             ;541
000228  7967              LDRB     r7,[r4,#5]            ;542
00022a  0400              LSLS     r0,r0,#16             ;541
00022c  4308              ORRS     r0,r0,r1              ;541
00022e  4305              ORRS     r5,r5,r0              ;541
000230  79a0              LDRB     r0,[r4,#6]            ;542
000232  7a21              LDRB     r1,[r4,#8]            ;542
000234  0200              LSLS     r0,r0,#8              ;542
000236  4307              ORRS     r7,r7,r0              ;542
000238  79e0              LDRB     r0,[r4,#7]            ;542
00023a  0609              LSLS     r1,r1,#24             ;542
00023c  0400              LSLS     r0,r0,#16             ;542
00023e  4308              ORRS     r0,r0,r1              ;542
000240  4307              ORRS     r7,r7,r0              ;542
000242  f7fffffe          BL       make_crc32_table
000246  1b78              SUBS     r0,r7,r5              ;551
000248  2400              MOVS     r4,#0                 ;551
00024a  1c40              ADDS     r0,r0,#1              ;551
00024c  0a07              LSRS     r7,r0,#8              ;551
00024e  e012              B        |L1.630|
                  |L1.592|
000250  22ff              MOVS     r2,#0xff              ;553
000252  08a9              LSRS     r1,r5,#2              ;553
000254  3201              ADDS     r2,#1                 ;553
000256  2000              MOVS     r0,#0                 ;553
000258  ab04              ADD      r3,sp,#0x10           ;553
00025a  f7fffffe          BL       bim_flash_read
00025e  22ff              MOVS     r2,#0xff              ;555
000260  3201              ADDS     r2,#1                 ;555
000262  0030              MOVS     r0,r6                 ;555
000264  a904              ADD      r1,sp,#0x10           ;555
000266  f7fffffe          BL       make_crc32
00026a  1c64              ADDS     r4,r4,#1              ;555
00026c  0424              LSLS     r4,r4,#16             ;551
00026e  0006              MOVS     r6,r0                 ;555
000270  0c24              LSRS     r4,r4,#16             ;551
000272  35ff              ADDS     r5,r5,#0xff           ;551
000274  3501              ADDS     r5,#1                 ;551
                  |L1.630|
000276  42a7              CMP      r7,r4                 ;551
000278  d8ea              BHI      |L1.592|
00027a  4668              MOV      r0,sp                 ;559
00027c  0a31              LSRS     r1,r6,#8              ;560
00027e  7006              STRB     r6,[r0,#0]            ;559
000280  7041              STRB     r1,[r0,#1]            ;560
000282  0c31              LSRS     r1,r6,#16             ;561
000284  7081              STRB     r1,[r0,#2]            ;561
000286  0e31              LSRS     r1,r6,#24             ;562
000288  70c1              STRB     r1,[r0,#3]            ;562
00028a  2108              MOVS     r1,#8                 ;563
00028c  2010              MOVS     r0,#0x10              ;563
00028e  466a              MOV      r2,sp                 ;563
                  |L1.656|
000290  f7fffffe          BL       cmd_response
000294  e7bf              B        |L1.534|
                  |L1.662|
000296  78a0              LDRB     r0,[r4,#2]            ;574
000298  7861              LDRB     r1,[r4,#1]            ;574
00029a  7922              LDRB     r2,[r4,#4]            ;574
00029c  0200              LSLS     r0,r0,#8              ;574
00029e  4301              ORRS     r1,r1,r0              ;574
0002a0  78e0              LDRB     r0,[r4,#3]            ;574
0002a2  0612              LSLS     r2,r2,#24             ;574
0002a4  0400              LSLS     r0,r0,#16             ;574
0002a6  4310              ORRS     r0,r0,r2              ;574
0002a8  4301              ORRS     r1,r1,r0              ;574
0002aa  485e              LDR      r0,|L1.1060|
0002ac  f7fffffe          BL       __aeabi_uidivmod
0002b0  4950              LDR      r1,|L1.1012|
0002b2  0200              LSLS     r0,r0,#8              ;578
0002b4  38e5              SUBS     r0,r0,#0xe5           ;578
0002b6  6008              STR      r0,[r1,#0]            ;578
0002b8  7960              LDRB     r0,[r4,#5]            ;587
0002ba  0040              LSLS     r0,r0,#1              ;587
0002bc  f7fffffe          BL       bim_delay_ms
0002c0  7861              LDRB     r1,[r4,#1]            ;589
0002c2  4668              MOV      r0,sp                 ;589
0002c4  466a              MOV      r2,sp                 ;594
0002c6  7001              STRB     r1,[r0,#0]            ;589
0002c8  78a1              LDRB     r1,[r4,#2]            ;590
0002ca  7041              STRB     r1,[r0,#1]            ;590
0002cc  78e1              LDRB     r1,[r4,#3]            ;591
0002ce  7081              STRB     r1,[r0,#2]            ;591
0002d0  7921              LDRB     r1,[r4,#4]            ;592
0002d2  70c1              STRB     r1,[r0,#3]            ;592
0002d4  7961              LDRB     r1,[r4,#5]            ;593
0002d6  7101              STRB     r1,[r0,#4]            ;593
0002d8  2109              MOVS     r1,#9                 ;594
0002da  200f              MOVS     r0,#0xf               ;594
0002dc  f7fffffe          BL       cmd_response
0002e0  2002              MOVS     r0,#2                 ;595
0002e2  f7fffffe          BL       bim_icu_init
0002e6  e796              B        |L1.534|
;;;607    
                          ENDP

                  bim_uart_data_callback PROC
;;;200    
;;;201    void bim_uart_data_callback( uint8_t * buff, uint16_t len)
0002e8  b5f8              PUSH     {r3-r7,lr}
;;;202    {
0002ea  000d              MOVS     r5,r1
;;;203    	static uint8_t cmd_status=0;
;;;204    	static uint16_t index=0,index_cnt=0;
;;;205    
;;;206    	static uint16_t length;
;;;207    	static uint16_t scmd_length;
;;;208    	static uint32_t write_addr;
;;;209    	static uint32_t read_addr;
;;;210    	static uint8_t read_buff[256];
;;;211    
;;;212    
;;;213    	while(len>0)
;;;214    	{
;;;215    		switch(cmd_status)
0002ec  4e47              LDR      r6,|L1.1036|
0002ee  0004              MOVS     r4,r0                 ;202
;;;216    		{
;;;217    
;;;218    		case UART_CMD_STATE_HEAD:
;;;219    		{
;;;220    			if(buff[0]==0x01)
;;;221    			{
;;;222    				cmd_status=UART_CMD_STATE_OPCODE_ONE;
;;;223    			}
;;;224    			else
;;;225    				cmd_status=UART_CMD_STATE_HEAD;
;;;226    		}
;;;227    		break;
;;;228    		case UART_CMD_STATE_OPCODE_ONE:
;;;229    		{
;;;230    			if( buff[0]==0xe0 )
;;;231    				cmd_status=UART_CMD_STATE_OPCODE_TWO;
;;;232    			else
;;;233    				cmd_status=UART_CMD_STATE_HEAD;
;;;234    
;;;235    
;;;236    		}
;;;237    		break;
;;;238    		case UART_CMD_STATE_OPCODE_TWO:
;;;239    		{
;;;240    			if( buff[0]==0xfc )
;;;241    				cmd_status=UART_CMD_STATE_LENGTH;
;;;242    			else
;;;243    				cmd_status=UART_CMD_STATE_HEAD;
;;;244    		}
;;;245    		break;
;;;246    		case UART_CMD_STATE_LENGTH:
;;;247    		{
;;;248    			length=buff[0];
;;;249    
;;;250    			if(0xff==buff[0])
;;;251    			{
;;;252    				cmd_status=UART_CMD_STATE_CMD_FLASH;
;;;253    			}
;;;254    			else if( buff[0]>0 && buff[0]!=0xff )
;;;255    			{
;;;256    				cmd_status=UART_CMD_STATE_CMD;
;;;257    				index=0;
;;;258    			}
;;;259    			else
;;;260    				cmd_status=UART_CMD_STATE_HEAD;
;;;261    
;;;262    
;;;263    		}
;;;264    		break;
;;;265    
;;;266    		case UART_CMD_STATE_CMD:
;;;267    		{
;;;268    			bim_uart_cmd[index++]=buff[0];
;;;269    
;;;270    			if(index==length)
;;;271    			{
;;;272    
;;;273    				uart_cmd_dispath(bim_uart_cmd, length);
;;;274    				cmd_status=UART_CMD_STATE_HEAD;
;;;275    			}
;;;276    		}
;;;277    		break;
;;;278    
;;;279    		case UART_CMD_STATE_CMD_FLASH:
;;;280    		{
;;;281    			if( buff[0]==0xf4 )
;;;282    				cmd_status=UART_CMD_STATE_LENGTH_FLASH_LEN0;
;;;283    			else
;;;284    				cmd_status=UART_CMD_STATE_HEAD;
;;;285    		}
;;;286    		break;
;;;287    		case UART_CMD_STATE_LENGTH_FLASH_LEN0:
;;;288    		{
;;;289    			cmd_status=UART_CMD_STATE_LENGTH_FLASH_LEN1;
;;;290    			scmd_length=buff[0];
;;;291    
;;;292    		}
;;;293    		break;
;;;294    		case UART_CMD_STATE_LENGTH_FLASH_LEN1:
;;;295    		{
;;;296    
;;;297    			scmd_length += (buff[0]<<8);
;;;298    
;;;299    			if(scmd_length>0)
;;;300    				cmd_status=UART_CMD_STATE_LENGTH_FLASH_SCMD;
;;;301    			else
;;;302    				cmd_status=UART_CMD_STATE_HEAD;
;;;303    
;;;304    			index=0;
;;;305    			index_cnt=0;
;;;306    		}
;;;307    		break;
;;;308    
;;;309    		case UART_CMD_STATE_LENGTH_FLASH_SCMD:
;;;310    		{
;;;311    			bim_uart_data[index++]=buff[0];
;;;312    
;;;313    			/*
;;;314    			 if(bim_uart_data[0]==0x0a && index==scmd_length )
;;;315    			 {
;;;316    			     int32_t addr = SEC_IMAGE_ALLOC_END_FADDR ;
;;;317    
;;;318    			     bim_fflash_wr_protect_8k();
;;;319    				bim_fflash_erase_one_block(addr);
;;;320    
;;;321    				addr -= FLASH_ONE_BLOCK_SIZE;
;;;322    				bim_fflash_erase_one_block(addr);
;;;323    
;;;324    				addr -= FLASH_ONE_BLOCK_SIZE;
;;;325    				bim_fflash_erase_one_block(addr);
;;;326    
;;;327    			     addr -= FLASH_ONE_BLOCK_SIZE;
;;;328    				bim_fflash_erase_one_block(addr);
;;;329    
;;;330    				addr -= FLASH_SEC_SIZE;
;;;331    				for(;addr >= SEC_IMAGE_ALLOC_START_STACK_FADDR;addr-= FLASH_SEC_SIZE )
;;;332    				{
;;;333    					bim_erase_section(addr,FLASH_SEC_SIZE);
;;;334    				}
;;;335    
;;;336    			     operate_flash_cmd_response(0x0a,0,3,&bim_uart_data[1]);
;;;337    			     cmd_status=UART_CMD_STATE_HEAD;
;;;338    			 }*/
;;;339    
;;;340    
;;;341    
;;;342    			if(bim_uart_data[0]==0x09 && index==scmd_length)//read id
;;;343    			{
;;;344    				read_addr = bim_uart_data[1]|(bim_uart_data[2]<<8)|(bim_uart_data[3]<<16)|(bim_uart_data[4]<<24) ;
;;;345    
;;;346    				if(read_addr<0x27ff0)
;;;347    				{
;;;348    					bim_uart_data[5]=scmd_length-5;
;;;349    					operate_flash_cmd_response(0x09,6,7,&bim_uart_data[1]);
;;;350    				}
;;;351    				else
;;;352    				{
;;;353    					bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4, 16, read_buff);
;;;354    					for(uint8_t i=0; i<16; i++)
;;;355    						bim_uart_data[5+i]=read_buff[i];
;;;356    
;;;357    					operate_flash_cmd_response(0x09,0,4102,&bim_uart_data[1]);
;;;358    
;;;359    				}
;;;360    				cmd_status=UART_CMD_STATE_HEAD;
;;;361    
;;;362    			}
;;;363    			else if(bim_uart_data[0]==0x0f && index==scmd_length)//erase
;;;364    			{
;;;365    				int32_t addr = bim_uart_data[2]|(bim_uart_data[3]<<8)|(bim_uart_data[4]<<16)|(bim_uart_data[5]<<24) ;
;;;366    
;;;367    				if(addr<0x1000)
;;;368    				{
;;;369    					operate_flash_cmd_response(0x0f,6,0x07,&bim_uart_data[1]);
;;;370    				}
;;;371    				else
;;;372    				{
;;;373    					if(erase_fenable==1)
;;;374    					{
;;;375    						//if(addr>=0x20000)
;;;376    						// 128k
;;;377    						//bim_fflash_wr_protect_128k();
;;;378    						//else
;;;379    						// 32k
;;;380    						//bim_fflash_wr_protect_8k();
;;;381    						erase_fenable=0;
;;;382    					}
;;;383    
;;;384    
;;;385    					if(bim_uart_data[1]==0x20)
;;;386    					{
;;;387    						//bim_erase_section(addr,FLASH_SEC_SIZE);
;;;388    						bim_flash_erase(FLASH_SPACE_TYPE_MAIN, addr/4, 1024);
;;;389    
;;;390    					}
;;;391    					else if(bim_uart_data[1]==0xd8)
;;;392    					{
;;;393    						//bim_fflash_erase_one_block(addr);
;;;394    						bim_flash_erase(FLASH_SPACE_TYPE_MAIN, addr/4, 8*1024);
;;;395    
;;;396    					}
;;;397    					operate_flash_cmd_response(0x0f,0,0x07,&bim_uart_data[1]);
;;;398    				}
;;;399    				cmd_status=UART_CMD_STATE_HEAD;
;;;400    			}
;;;401    			else if(bim_uart_data[0]==0x06 && index==scmd_length)//write bt addr
;;;402    			{
;;;403    				write_addr = bim_uart_data[1]|(bim_uart_data[2]<<8)|(bim_uart_data[3]<<16)|(bim_uart_data[4]<<24) ;
;;;404    
;;;405    				if(write_addr<0x27ff0)
;;;406    				{
;;;407    					bim_uart_data[5]=scmd_length-5;
;;;408    					operate_flash_cmd_response(0x06,6,7,&bim_uart_data[1]);
;;;409    				}
;;;410    				else
;;;411    				{
;;;412    					bim_flash_write(FLASH_SPACE_TYPE_MAIN, write_addr/4, (scmd_length-5), &bim_uart_data[5]);
;;;413    					bim_uart_data[5]=scmd_length-5;
;;;414    					operate_flash_cmd_response(0x06,0,7,&bim_uart_data[1]);
;;;415    
;;;416    				}
;;;417    				cmd_status=UART_CMD_STATE_HEAD;
;;;418    
;;;419    			}
;;;420    			else if( bim_uart_data[0]==0x07 )//write code data
;;;421    			{
;;;422    
;;;423    				if(index >= (256*(index_cnt+1)+5) )
;;;424    				{
;;;425    					write_addr = bim_uart_data[1]|(bim_uart_data[2]<<8)|(bim_uart_data[3]<<16)|(bim_uart_data[4]<<24) ;
;;;426    
;;;427    
;;;428    					if(write_addr<0x1000)
;;;429    					{
;;;430    
;;;431    						index_cnt++;
;;;432    						if(index==scmd_length )
;;;433    						{
;;;434    							bim_uart_data[1]=0xf0;
;;;435    							bim_uart_data[2]=0x1f;
;;;436    							operate_flash_cmd_response(0x07,6,6,&bim_uart_data[1]);
;;;437    							cmd_status=UART_CMD_STATE_HEAD;
;;;438    							index_cnt=0;
;;;439    						}
;;;440    					}
;;;441    					else
;;;442    					{
;;;443    						bim_flash_write(FLASH_SPACE_TYPE_MAIN, (write_addr+256*(index_cnt))/4, 256, &bim_uart_data[5+256*(index_cnt)]);
;;;444    
;;;445    						index_cnt++;
;;;446    
;;;447    						if(index==scmd_length )
;;;448    						{
;;;449    							operate_flash_cmd_response(0x07,0,6,&bim_uart_data[1]);
;;;450    							cmd_status=UART_CMD_STATE_HEAD;
;;;451    							index_cnt=0;
;;;452    						}
;;;453    					}
;;;454    				}
;;;455    			}
;;;456    			else if(index==scmd_length)
;;;457    				cmd_status=UART_CMD_STATE_HEAD;
;;;458    		}
;;;459    		break;
;;;460    
;;;461    		}
;;;462    		len--;
;;;463    		buff++;
0002f0  e03f              B        |L1.882|
                  |L1.754|
0002f2  7870              LDRB     r0,[r6,#1]            ;215  ; cmd_status
0002f4  0003              MOVS     r3,r0                 ;215
0002f6  f7fffffe          BL       __ARM_common_switch8
0002fa  0906              DCB      0x09,0x06
0002fc  0b101522          DCB      0x0b,0x10,0x15,0x22
000300  333f4451          DCB      0x33,0x3f,0x44,0x51
000304  3800              DCB      0x38,0x00
000306  7820              LDRB     r0,[r4,#0]            ;220
000308  2801              CMP      r0,#1                 ;220
00030a  d02d              BEQ      |L1.872|
                  |L1.780|
00030c  2000              MOVS     r0,#0                 ;225
00030e  e02b              B        |L1.872|
000310  7820              LDRB     r0,[r4,#0]            ;230
000312  28e0              CMP      r0,#0xe0              ;230
000314  d1fa              BNE      |L1.780|
000316  2002              MOVS     r0,#2                 ;231
000318  e026              B        |L1.872|
00031a  7820              LDRB     r0,[r4,#0]            ;240
00031c  28fc              CMP      r0,#0xfc              ;240
00031e  d1f5              BNE      |L1.780|
000320  2003              MOVS     r0,#3                 ;241
000322  e021              B        |L1.872|
000324  7820              LDRB     r0,[r4,#0]            ;248
000326  28ff              CMP      r0,#0xff              ;250
000328  8130              STRH     r0,[r6,#8]            ;248
00032a  d006              BEQ      |L1.826|
00032c  2800              CMP      r0,#0                 ;254
00032e  d0ed              BEQ      |L1.780|
000330  2004              MOVS     r0,#4                 ;256
000332  7070              STRB     r0,[r6,#1]            ;256
000334  2000              MOVS     r0,#0                 ;257
000336  80b0              STRH     r0,[r6,#4]            ;257
000338  e017              B        |L1.874|
                  |L1.826|
00033a  2005              MOVS     r0,#5                 ;252
00033c  e014              B        |L1.872|
00033e  7820              LDRB     r0,[r4,#0]            ;268
000340  88b2              LDRH     r2,[r6,#4]            ;268  ; index
000342  4939              LDR      r1,|L1.1064|
000344  5488              STRB     r0,[r1,r2]            ;268
000346  1c52              ADDS     r2,r2,#1              ;268
000348  0410              LSLS     r0,r2,#16             ;268
00034a  0c00              LSRS     r0,r0,#16             ;268
00034c  80b0              STRH     r0,[r6,#4]            ;268
00034e  8931              LDRH     r1,[r6,#8]            ;270  ; length
000350  4288              CMP      r0,r1                 ;270
000352  d10a              BNE      |L1.874|
000354  0609              LSLS     r1,r1,#24             ;273
000356  4834              LDR      r0,|L1.1064|
000358  0e09              LSRS     r1,r1,#24             ;273
00035a  f7fffffe          BL       uart_cmd_dispath
00035e  e7d5              B        |L1.780|
000360  7820              LDRB     r0,[r4,#0]            ;281
000362  28f4              CMP      r0,#0xf4              ;281
000364  d1d2              BNE      |L1.780|
000366  2006              MOVS     r0,#6                 ;282
                  |L1.872|
000368  7070              STRB     r0,[r6,#1]            ;457
                  |L1.874|
00036a  1e6d              SUBS     r5,r5,#1              ;457
00036c  042d              LSLS     r5,r5,#16             ;462
00036e  0c2d              LSRS     r5,r5,#16             ;462
000370  1c64              ADDS     r4,r4,#1              ;462
                  |L1.882|
000372  2d00              CMP      r5,#0                 ;213
000374  d1bd              BNE      |L1.754|
;;;464    	}
;;;465    }
000376  bdf8              POP      {r3-r7,pc}
000378  2007              MOVS     r0,#7                 ;289
00037a  7070              STRB     r0,[r6,#1]            ;289
00037c  7820              LDRB     r0,[r4,#0]            ;290
00037e  8170              STRH     r0,[r6,#0xa]          ;290
000380  e7f3              B        |L1.874|
000382  7820              LDRB     r0,[r4,#0]            ;297
000384  8971              LDRH     r1,[r6,#0xa]          ;297  ; scmd_length
000386  0200              LSLS     r0,r0,#8              ;297
000388  1840              ADDS     r0,r0,r1              ;297
00038a  0400              LSLS     r0,r0,#16             ;297
00038c  0c00              LSRS     r0,r0,#16             ;297
00038e  8170              STRH     r0,[r6,#0xa]          ;297
000390  d000              BEQ      |L1.916|
000392  2008              MOVS     r0,#8                 ;300
                  |L1.916|
000394  7070              STRB     r0,[r6,#1]            ;302
000396  2000              MOVS     r0,#0                 ;304
000398  80b0              STRH     r0,[r6,#4]            ;304
00039a  e103              B        |L1.1444|
00039c  7821              LDRB     r1,[r4,#0]            ;311
00039e  4b22              LDR      r3,|L1.1064|
0003a0  88b0              LDRH     r0,[r6,#4]            ;311  ; index
0003a2  3310              ADDS     r3,r3,#0x10           ;311
0003a4  5419              STRB     r1,[r3,r0]            ;311
0003a6  1c40              ADDS     r0,r0,#1              ;311
0003a8  0400              LSLS     r0,r0,#16             ;311
0003aa  0c00              LSRS     r0,r0,#16             ;311
0003ac  80b0              STRH     r0,[r6,#4]            ;311
0003ae  7819              LDRB     r1,[r3,#0]            ;342  ; bim_uart_data
0003b0  2909              CMP      r1,#9                 ;342
0003b2  d006              BEQ      |L1.962|
0003b4  290f              CMP      r1,#0xf               ;363
0003b6  d053              BEQ      |L1.1120|
0003b8  2906              CMP      r1,#6                 ;401
0003ba  d072              BEQ      |L1.1186|
0003bc  2907              CMP      r1,#7                 ;420
0003be  d071              BEQ      |L1.1188|
                  |L1.960|
0003c0  e0f2              B        |L1.1448|
                  |L1.962|
0003c2  8971              LDRH     r1,[r6,#0xa]          ;342  ; scmd_length
0003c4  4288              CMP      r0,r1                 ;342
0003c6  d1fb              BNE      |L1.960|
0003c8  789a              LDRB     r2,[r3,#2]            ;344  ; bim_uart_data
0003ca  7858              LDRB     r0,[r3,#1]            ;344  ; bim_uart_data
0003cc  001f              MOVS     r7,r3                 ;344
0003ce  0212              LSLS     r2,r2,#8              ;344
0003d0  4310              ORRS     r0,r0,r2              ;344
0003d2  78da              LDRB     r2,[r3,#3]            ;344  ; bim_uart_data
0003d4  791b              LDRB     r3,[r3,#4]            ;344  ; bim_uart_data
0003d6  0412              LSLS     r2,r2,#16             ;344
0003d8  061b              LSLS     r3,r3,#24             ;344
0003da  431a              ORRS     r2,r2,r3              ;344
0003dc  4310              ORRS     r0,r0,r2              ;344
0003de  4a13              LDR      r2,|L1.1068|
0003e0  6170              STR      r0,[r6,#0x14]         ;346  ; read_addr
0003e2  4290              CMP      r0,r2                 ;346
0003e4  d224              BCS      |L1.1072|
0003e6  1f49              SUBS     r1,r1,#5              ;346
0003e8  7179              STRB     r1,[r7,#5]            ;348
0003ea  1c7b              ADDS     r3,r7,#1              ;349
0003ec  2207              MOVS     r2,#7                 ;349
0003ee  2106              MOVS     r1,#6                 ;349
0003f0  2009              MOVS     r0,#9                 ;349
0003f2  e032              B        |L1.1114|
                  |L1.1012|
                          DCD      0x00806300
                  |L1.1016|
                          DCD      0x0000891b
                  |L1.1020|
                          DCD      0x00001001
                  |L1.1024|
                          DCD      0x00700001
                  |L1.1028|
                          DCD      0x00806500
                  |L1.1032|
                          DCD      0xfffcfffc
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      ||.bss||+0x100
                  |L1.1044|
                          DCD      0x00002004
                  |L1.1048|
                          DCD      0xffffef98
                  |L1.1052|
                          DCD      ||.bss||+0x311c
                  |L1.1056|
                          DCD      0xedb88320
                  |L1.1060|
                          DCD      0x00f42400
                  |L1.1064|
                          DCD      ||.bss||+0x2104
                  |L1.1068|
                          DCD      0x00027ff0
                  |L1.1072|
000430  0881              LSRS     r1,r0,#2              ;353
000432  4b60              LDR      r3,|L1.1460|
000434  2210              MOVS     r2,#0x10              ;353
000436  2000              MOVS     r0,#0                 ;353
000438  f7fffffe          BL       bim_flash_read
00043c  495d              LDR      r1,|L1.1460|
00043e  2000              MOVS     r0,#0                 ;354
000440  003b              MOVS     r3,r7                 ;311
                  |L1.1090|
000442  5c0a              LDRB     r2,[r1,r0]            ;355
000444  181f              ADDS     r7,r3,r0              ;355
000446  1c40              ADDS     r0,r0,#1              ;355
000448  0600              LSLS     r0,r0,#24             ;354
00044a  0e00              LSRS     r0,r0,#24             ;354
00044c  2810              CMP      r0,#0x10              ;354
00044e  717a              STRB     r2,[r7,#5]            ;355
000450  d3f7              BCC      |L1.1090|
000452  2100              MOVS     r1,#0                 ;357
000454  4a58              LDR      r2,|L1.1464|
000456  2009              MOVS     r0,#9                 ;357
000458  e050              B        |L1.1276|
                  |L1.1114|
00045a  f7fffffe          BL       operate_flash_cmd_response
00045e  e755              B        |L1.780|
                  |L1.1120|
000460  8971              LDRH     r1,[r6,#0xa]          ;363  ; scmd_length
000462  4288              CMP      r0,r1                 ;363
000464  d17e              BNE      |L1.1380|
000466  78d9              LDRB     r1,[r3,#3]            ;365  ; bim_uart_data
000468  7898              LDRB     r0,[r3,#2]            ;365  ; bim_uart_data
00046a  795a              LDRB     r2,[r3,#5]            ;365  ; bim_uart_data
00046c  0209              LSLS     r1,r1,#8              ;365
00046e  4308              ORRS     r0,r0,r1              ;365
000470  7919              LDRB     r1,[r3,#4]            ;365  ; bim_uart_data
000472  0612              LSLS     r2,r2,#24             ;365
000474  0409              LSLS     r1,r1,#16             ;365
000476  4311              ORRS     r1,r1,r2              ;365
000478  4308              ORRS     r0,r0,r1              ;365
00047a  2101              MOVS     r1,#1                 ;367
00047c  0309              LSLS     r1,r1,#12             ;367
00047e  4288              CMP      r0,r1                 ;367
000480  da03              BGE      |L1.1162|
000482  2207              MOVS     r2,#7                 ;369
000484  2106              MOVS     r1,#6                 ;369
000486  200f              MOVS     r0,#0xf               ;369
000488  e038              B        |L1.1276|
                  |L1.1162|
00048a  78b1              LDRB     r1,[r6,#2]            ;373  ; erase_fenable
00048c  2901              CMP      r1,#1                 ;373
00048e  d101              BNE      |L1.1172|
000490  2100              MOVS     r1,#0                 ;381
000492  70b1              STRB     r1,[r6,#2]            ;381
                  |L1.1172|
000494  7859              LDRB     r1,[r3,#1]            ;385  ; bim_uart_data
000496  001f              MOVS     r7,r3                 ;385
000498  2920              CMP      r1,#0x20              ;385
00049a  d004              BEQ      |L1.1190|
00049c  29d8              CMP      r1,#0xd8              ;391
00049e  d009              BEQ      |L1.1204|
0004a0  e011              B        |L1.1222|
                  |L1.1186|
0004a2  e015              B        |L1.1232|
                  |L1.1188|
0004a4  e03b              B        |L1.1310|
                  |L1.1190|
0004a6  17c1              ASRS     r1,r0,#31             ;388
0004a8  0f89              LSRS     r1,r1,#30             ;388
0004aa  1808              ADDS     r0,r1,r0              ;388
0004ac  1081              ASRS     r1,r0,#2              ;388
0004ae  2201              MOVS     r2,#1                 ;388
0004b0  0292              LSLS     r2,r2,#10             ;388
0004b2  e005              B        |L1.1216|
                  |L1.1204|
0004b4  17c1              ASRS     r1,r0,#31             ;394
0004b6  0f89              LSRS     r1,r1,#30             ;394
0004b8  1808              ADDS     r0,r1,r0              ;394
0004ba  1081              ASRS     r1,r0,#2              ;394
0004bc  2201              MOVS     r2,#1                 ;394
0004be  0352              LSLS     r2,r2,#13             ;394
                  |L1.1216|
0004c0  2000              MOVS     r0,#0                 ;394
0004c2  f7fffffe          BL       bim_flash_erase
                  |L1.1222|
0004c6  1c7b              ADDS     r3,r7,#1              ;397
0004c8  2207              MOVS     r2,#7                 ;397
0004ca  2100              MOVS     r1,#0                 ;397
0004cc  200f              MOVS     r0,#0xf               ;397
0004ce  e7c4              B        |L1.1114|
                  |L1.1232|
0004d0  8972              LDRH     r2,[r6,#0xa]          ;401  ; scmd_length
0004d2  4290              CMP      r0,r2                 ;401
0004d4  d168              BNE      |L1.1448|
0004d6  7899              LDRB     r1,[r3,#2]            ;403  ; bim_uart_data
0004d8  7858              LDRB     r0,[r3,#1]            ;403  ; bim_uart_data
0004da  791f              LDRB     r7,[r3,#4]            ;403  ; bim_uart_data
0004dc  0209              LSLS     r1,r1,#8              ;403
0004de  4308              ORRS     r0,r0,r1              ;403
0004e0  78d9              LDRB     r1,[r3,#3]            ;403  ; bim_uart_data
0004e2  063f              LSLS     r7,r7,#24             ;403
0004e4  0409              LSLS     r1,r1,#16             ;403
0004e6  4339              ORRS     r1,r1,r7              ;403
0004e8  4308              ORRS     r0,r0,r1              ;403
0004ea  4934              LDR      r1,|L1.1468|
0004ec  6130              STR      r0,[r6,#0x10]         ;405  ; write_addr
0004ee  4288              CMP      r0,r1                 ;405
0004f0  d206              BCS      |L1.1280|
0004f2  1f52              SUBS     r2,r2,#5              ;405
0004f4  715a              STRB     r2,[r3,#5]            ;407
0004f6  2207              MOVS     r2,#7                 ;408
0004f8  2106              MOVS     r1,#6                 ;408
0004fa  0008              MOVS     r0,r1                 ;408
                  |L1.1276|
0004fc  1c5b              ADDS     r3,r3,#1              ;408
0004fe  e7ac              B        |L1.1114|
                  |L1.1280|
000500  0881              LSRS     r1,r0,#2              ;412
000502  001f              MOVS     r7,r3                 ;412
000504  1d5b              ADDS     r3,r3,#5              ;412
000506  2000              MOVS     r0,#0                 ;412
000508  1f52              SUBS     r2,r2,#5              ;412
00050a  f7fffffe          BL       bim_flash_write
00050e  7ab0              LDRB     r0,[r6,#0xa]          ;413  ; scmd_length
000510  2207              MOVS     r2,#7                 ;414
000512  2100              MOVS     r1,#0                 ;414
000514  1f40              SUBS     r0,r0,#5              ;413
000516  1c7b              ADDS     r3,r7,#1              ;414
000518  7178              STRB     r0,[r7,#5]            ;413
00051a  2006              MOVS     r0,#6                 ;414
00051c  e79d              B        |L1.1114|
                  |L1.1310|
00051e  88f1              LDRH     r1,[r6,#6]            ;423  ; index_cnt
000520  468c              MOV      r12,r1                ;423
000522  0209              LSLS     r1,r1,#8              ;423
000524  1dca              ADDS     r2,r1,#7              ;423
000526  32fe              ADDS     r2,r2,#0xfe           ;423
000528  4282              CMP      r2,r0                 ;423
00052a  d900              BLS      |L1.1326|
                  |L1.1324|
00052c  e71d              B        |L1.874|
                  |L1.1326|
00052e  4b24              LDR      r3,|L1.1472|
000530  789f              LDRB     r7,[r3,#2]            ;425  ; bim_uart_data
000532  785a              LDRB     r2,[r3,#1]            ;425  ; bim_uart_data
000534  023f              LSLS     r7,r7,#8              ;425
000536  433a              ORRS     r2,r2,r7              ;425
000538  78df              LDRB     r7,[r3,#3]            ;425  ; bim_uart_data
00053a  791b              LDRB     r3,[r3,#4]            ;425  ; bim_uart_data
00053c  043f              LSLS     r7,r7,#16             ;425
00053e  061b              LSLS     r3,r3,#24             ;425
000540  431f              ORRS     r7,r7,r3              ;425
000542  433a              ORRS     r2,r2,r7              ;425
000544  2301              MOVS     r3,#1                 ;428
000546  031b              LSLS     r3,r3,#12             ;428
000548  429a              CMP      r2,r3                 ;428
00054a  6132              STR      r2,[r6,#0x10]         ;428  ; write_addr
00054c  d211              BCS      |L1.1394|
00054e  4661              MOV      r1,r12                ;428
000550  1c49              ADDS     r1,r1,#1              ;428
000552  80f1              STRH     r1,[r6,#6]            ;431
000554  8971              LDRH     r1,[r6,#0xa]          ;432  ; scmd_length
000556  4288              CMP      r0,r1                 ;432
000558  d1e8              BNE      |L1.1324|
00055a  4b19              LDR      r3,|L1.1472|
00055c  20f0              MOVS     r0,#0xf0              ;434
00055e  7058              STRB     r0,[r3,#1]            ;434
000560  201f              MOVS     r0,#0x1f              ;435
000562  e000              B        |L1.1382|
                  |L1.1380|
000564  e020              B        |L1.1448|
                  |L1.1382|
000566  2206              MOVS     r2,#6                 ;436
000568  7098              STRB     r0,[r3,#2]            ;435
00056a  0011              MOVS     r1,r2                 ;436
00056c  2007              MOVS     r0,#7                 ;436
00056e  1c5b              ADDS     r3,r3,#1              ;436
000570  e014              B        |L1.1436|
                  |L1.1394|
000572  4f13              LDR      r7,|L1.1472|
000574  1888              ADDS     r0,r1,r2              ;443
000576  19cb              ADDS     r3,r1,r7              ;443
000578  0881              LSRS     r1,r0,#2              ;443
00057a  22ff              MOVS     r2,#0xff              ;443
00057c  3201              ADDS     r2,#1                 ;443
00057e  2000              MOVS     r0,#0                 ;443
000580  1d5b              ADDS     r3,r3,#5              ;443
000582  f7fffffe          BL       bim_flash_write
000586  88f0              LDRH     r0,[r6,#6]            ;445  ; index_cnt
000588  1c40              ADDS     r0,r0,#1              ;445
00058a  80f0              STRH     r0,[r6,#6]            ;445
00058c  88b0              LDRH     r0,[r6,#4]            ;447  ; index
00058e  8971              LDRH     r1,[r6,#0xa]          ;447  ; scmd_length
000590  4288              CMP      r0,r1                 ;447
000592  d1cb              BNE      |L1.1324|
000594  1c7b              ADDS     r3,r7,#1              ;449
000596  2206              MOVS     r2,#6                 ;449
000598  2100              MOVS     r1,#0                 ;449
00059a  2007              MOVS     r0,#7                 ;449
                  |L1.1436|
00059c  f7fffffe          BL       operate_flash_cmd_response
0005a0  2000              MOVS     r0,#0                 ;437
0005a2  7070              STRB     r0,[r6,#1]            ;437
                  |L1.1444|
0005a4  80f0              STRH     r0,[r6,#6]            ;438
0005a6  e6e0              B        |L1.874|
                  |L1.1448|
0005a8  8971              LDRH     r1,[r6,#0xa]          ;456  ; scmd_length
0005aa  4288              CMP      r0,r1                 ;456
0005ac  d100              BNE      |L1.1456|
0005ae  e6ad              B        |L1.780|
                  |L1.1456|
0005b0  e6db              B        |L1.874|
;;;466    
                          ENDP

0005b2  0000              DCW      0x0000
                  |L1.1460|
                          DCD      ||.bss||
                  |L1.1464|
                          DCD      0x00001006
                  |L1.1468|
                          DCD      0x00027ff0
                  |L1.1472|
                          DCD      ||.bss||+0x2114

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  read_buff
                          %        256
                  bim_uart_rx_buf
                          %        8196
                  bim_uart_cmd
                          %        16
                  bim_uart_data
                          %        4104
                  crc32_table
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  uart_download_status
000000  00                DCB      0x00
                  cmd_status
000001  00                DCB      0x00
                  erase_fenable
000002  0000              DCB      0x00,0x00
                  index
000004  0000              DCW      0x0000
                  index_cnt
000006  0000              DCW      0x0000
                  length
000008  0000              DCB      0x00,0x00
                  scmd_length
00000a  0000              DCB      0x00,0x00
                  uart_buff_write
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  write_addr
                          DCD      0x00000000
                  read_addr
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=2

                          ARM
                  __ARM_common_switch8 PROC
000000  e55ec001          LDRB     r12,[lr,#-1]
000004  e153000c          CMP      r3,r12
000008  27de300c          LDRBCS   r3,[lr,r12]
00000c  37de3003          LDRBCC   r3,[lr,r3]
000010  e08ec083          ADD      r12,lr,r3,LSL #1
000014  e12fff1c          BX       r12
                          ENDP

