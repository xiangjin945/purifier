; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --thumb --list --debug -c --asm --interleave -o.\obj\bim_flash.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bim_flash.d --cpu=ARM9E --apcs=interwork -O3 --diag_suppress=9931 -I.\config -I.\app -I..\..\libs -I..\..\sdk\plactform\core_modules\src -I..\..\sdk\plactform\arch -I..\..\sdk\plactform\arch\compiler -I..\..\sdk\plactform\arch\ll -I..\..\sdk\plactform\core_modules\common\api -I..\..\sdk\plactform\arch\boot -I..\..\sdk\plactform\core_modules\dbg\api -I..\..\sdk\plactform\core_modules\rf\api -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\plactform\arch\main -I..\..\sdk\plactform\core_modules\util -I..\..\sdk\plactform\driver\pwm -I..\..\sdk\plactform\driver\adc -I..\..\sdk\plactform\driver\audio -I..\..\sdk\plactform\driver\wdt -I..\..\sdk\plactform\driver\rtc -I..\..\sdk\plactform\driver\i2c -I..\..\sdk\plactform\driver\utc -I..\..\sdk\plactform\driver\ir -I..\..\sdk\plactform\driver\spi -I..\..\sdk\plactform\driver\plf -I..\..\sdk\plactform\driver\counter -I..\..\sdk\plactform\driver\gpio -I..\..\sdk\plactform\driver\intcntl -I..\..\sdk\plactform\driver\icu -I..\..\sdk\plactform\driver\intc -I..\..\sdk\plactform\driver\flash -I..\..\sdk\plactform\driver\timer -I..\..\sdk\plactform\driver\reg -I..\..\sdk\plactform\driver\uart -I..\..\sdk\plactform\driver\emi -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\src -I..\..\sdk\plactform\reg -I..\..\sdk\plactform\driver\syscntl -I..\..\sdk\plactform\rom\hci -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\ble_stack\inc -I..\..\sdk\ble_stack\inc\hci -I..\..\sdk\ble_stack\inc\h4tl -I..\..\sdk\ble_stack\inc\ke -I..\..\sdk\ble_stack\inc\nvds -I..\..\sdk\ble_stack\inc\ea -I..\..\sdk\ble_stack\inc\em -I..\..\sdk\ble_stack\inc\ahi -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapc -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapm -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpc -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\atts -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattm -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cc -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cm -I..\..\sdk\ble_stack\inc\ble\ll\em -I..\..\sdk\ble_stack\inc\ble\ll\llc -I..\..\sdk\ble_stack\inc\ble\ll\lld -I..\..\sdk\ble_stack\inc\ble\ll\llm -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\inc\ble\hl\gap -I..\..\sdk\ble_stack\inc\ble\hl\gatt -I..\..\sdk\ble_stack\com\prf -I..\..\sdk\ble_stack\com\profiles\dis\diss\src -I..\..\sdk\ble_stack\com\profiles\bas\bass\src -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\api -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\src -I..\..\sdk\ble_stack\com\profiles\ancs -I..\..\sdk\ble_stack\com\profiles\FCC0\api -I..\..\sdk\ble_stack\com\profiles\FCC0\src -I..\..\sdk\ble_stack\com\profiles\FCC0\util -I..\..\sdk\ble_stack\com\profiles\FEE0\api -I..\..\sdk\ble_stack\com\profiles\FEE0\src -I..\..\sdk\ble_stack\com\profiles\hogp -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\api -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\src -I..\..\libs -I..\..\sdk\ble_stack\com\profiles\wechat\api -I..\..\sdk\ble_stack\com\profiles\wechat\src -I.\wechat -I..\..\sdk\ble_stack\com\profiles\bas\bass -I..\..\sdk\ble_stack\com\profiles\bas\bass\api -I..\..\sdk\ble_stack\com\profiles\dis\diss -I..\..\sdk\ble_stack\com\profiles\dis\diss\api -I..\..\sdk\ble_stack\com\profiles\FFF0\api -I..\..\sdk\ble_stack\com\profiles\FFF0 -I..\..\sdk\ble_stack\com\profiles\oad\api -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=532 --omf_browse=.\obj\bim_flash.crf app\bim_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bim_flash_init PROC
;;;57     
;;;58      void bim_flash_init(void)
000000  4882              LDR      r0,|L1.524|
;;;59      {
;;;60          // Init flash environment    
;;;61          bim_flash_env.length[0]    =  FLASH_MAIN_SIZE;
000002  2105              MOVS     r1,#5
000004  03c9              LSLS     r1,r1,#15
;;;62          bim_flash_env.space_type[0]  = FLASH_SPACE_TYPE_MAIN; 
000006  6001              STR      r1,[r0,#0]  ; bim_flash_env
000008  2100              MOVS     r1,#0
00000a  7201              STRB     r1,[r0,#8]
;;;63          
;;;64          bim_flash_env.length[1]    =  FLASH_NVR_SIZE;
00000c  2101              MOVS     r1,#1
00000e  0249              LSLS     r1,r1,#9
;;;65          bim_flash_env.space_type[1]  = FLASH_SPACE_TYPE_NVR;
000010  6041              STR      r1,[r0,#4]  ; bim_flash_env
000012  2101              MOVS     r1,#1
000014  7241              STRB     r1,[r0,#9]
;;;66       
;;;67      }
000016  4770              BX       lr
;;;68      
                          ENDP

                  bim_flash_readword PROC
;;;69     
;;;70      uint32_t bim_flash_readword(uint8_t type,uint32_t address)
000018  b570              PUSH     {r4-r6,lr}
;;;71     {
;;;72         uint32_t reg;
;;;73         uint32_t data;
;;;74         
;;;75     
;;;76         REG_AHB3_MFC_ADDR = address;
00001a  4c7d              LDR      r4,|L1.528|
00001c  0005              MOVS     r5,r0                 ;71
00001e  60a1              STR      r1,[r4,#8]
;;;77     
;;;78         bim_flash_writeKey(); // write key
000020  f7fffffe          BL       bim_flash_writeKey
;;;79         bim_flash_unlock(); //wipe off WP
000024  f7fffffe          BL       bim_flash_unlock
;;;80     
;;;81         reg = REG_AHB3_MFC_CONTROL;
000028  6861              LDR      r1,[r4,#4]
;;;82         reg &= ~((0x07 << 2) | (0x03 << 5)); //clear control mode and space
00002a  207c              MOVS     r0,#0x7c
00002c  4381              BICS     r1,r1,r0
;;;83         reg  |= ( MFC_CONTROL_READ | (type << 5)); // set write mode and control space
00002e  0168              LSLS     r0,r5,#5
000030  4308              ORRS     r0,r0,r1
;;;84         REG_AHB3_MFC_CONTROL = reg;
000032  6060              STR      r0,[r4,#4]
;;;85     
;;;86         bim_flash_start();
000034  f7fffffe          BL       bim_flash_start
                  |L1.56|
;;;87     
;;;88         while(bim_flash_status() == 1);
000038  f7fffffe          BL       bim_flash_status
00003c  2801              CMP      r0,#1
00003e  d0fb              BEQ      |L1.56|
;;;89     
;;;90         data = REG_AHB3_MFC_DATA;
000040  68e4              LDR      r4,[r4,#0xc]
;;;91         bim_flash_clearKey();
000042  f7fffffe          BL       bim_flash_clearKey
;;;92         return data;
000046  0020              MOVS     r0,r4
;;;93     }
000048  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

                  bim_flash_writeword PROC
;;;95      void bim_flash_writeword(uint8_t type,uint32_t address, uint32_t data)
00004a  b570              PUSH     {r4-r6,lr}
;;;96     {
;;;97         uint32_t reg;
;;;98        
;;;99         REG_AHB3_MFC_ADDR = address;
00004c  4c70              LDR      r4,|L1.528|
00004e  0005              MOVS     r5,r0                 ;96
000050  60a1              STR      r1,[r4,#8]
;;;100        /* Write the data                                                                   */
;;;101        REG_AHB3_MFC_DATA = data;
000052  60e2              STR      r2,[r4,#0xc]
;;;102        bim_flash_writeKey(); // write key
000054  f7fffffe          BL       bim_flash_writeKey
;;;103        bim_flash_unlock(); //wipe off WP
000058  f7fffffe          BL       bim_flash_unlock
;;;104        reg = REG_AHB3_MFC_CONTROL;
00005c  6861              LDR      r1,[r4,#4]
;;;105        reg &= ~((0x07 << 2) | (0x03 << 5)); //clear control mode and space
00005e  207c              MOVS     r0,#0x7c
000060  4381              BICS     r1,r1,r0
;;;106        reg  |= ( MFC_CONTROL_WRITE | (type << 5)); // set write mode and control space
000062  0168              LSLS     r0,r5,#5
000064  1d00              ADDS     r0,r0,#4
000066  4308              ORRS     r0,r0,r1
;;;107        REG_AHB3_MFC_CONTROL = reg;
000068  6060              STR      r0,[r4,#4]
;;;108        bim_flash_start();
00006a  f7fffffe          BL       bim_flash_start
                  |L1.110|
;;;109        while(bim_flash_status()) ;
00006e  f7fffffe          BL       bim_flash_status
000072  2800              CMP      r0,#0
000074  d1fb              BNE      |L1.110|
;;;110        bim_flash_clearKey();
000076  f7fffffe          BL       bim_flash_clearKey
;;;111    	
;;;112    }
00007a  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP

                  bim_flash_erase_sector PROC
;;;115    
;;;116    void bim_flash_erase_sector(uint8_t type,uint32_t address)
00007c  b570              PUSH     {r4-r6,lr}
;;;117    {
;;;118    
;;;119        uint32_t reg;
;;;120    
;;;121        REG_AHB3_MFC_ADDR = address;
00007e  4c64              LDR      r4,|L1.528|
000080  0005              MOVS     r5,r0                 ;117
000082  60a1              STR      r1,[r4,#8]
;;;122    
;;;123        bim_flash_writeKey(); // write key
000084  f7fffffe          BL       bim_flash_writeKey
;;;124        bim_flash_unlock(); //wipe off WP
000088  f7fffffe          BL       bim_flash_unlock
;;;125    
;;;126        reg = REG_AHB3_MFC_CONTROL;
00008c  6861              LDR      r1,[r4,#4]
;;;127        reg &= ~((0x07 << 2) | (0x03 << 5)); //clear control mode and space
00008e  207c              MOVS     r0,#0x7c
000090  4381              BICS     r1,r1,r0
;;;128        reg  |= ( MFC_CONTROL_SECT_ERASE | (type << 5)); // set write mode and control space
000092  0168              LSLS     r0,r5,#5
000094  3008              ADDS     r0,r0,#8
000096  4308              ORRS     r0,r0,r1
;;;129        REG_AHB3_MFC_CONTROL = reg;
000098  6060              STR      r0,[r4,#4]
;;;130    
;;;131        bim_flash_start();
00009a  f7fffffe          BL       bim_flash_start
                  |L1.158|
;;;132    
;;;133        while(bim_flash_status());
00009e  f7fffffe          BL       bim_flash_status
0000a2  2800              CMP      r0,#0
0000a4  d1fb              BNE      |L1.158|
;;;134        bim_flash_clearKey();
0000a6  f7fffffe          BL       bim_flash_clearKey
;;;135    }
0000aa  bd70              POP      {r4-r6,pc}
;;;136    
                          ENDP

                  bim_flash_erase PROC
;;;139    
;;;140    void bim_flash_erase(uint8_t flash_type, uint32_t address, uint32_t size)
0000ac  b570              PUSH     {r4-r6,lr}
;;;141    {
0000ae  0006              MOVS     r6,r0
;;;142        uint32_t end_address;
;;;143    
;;;144        end_address = address + size;
0000b0  188d              ADDS     r5,r1,r2
;;;145    
;;;146        // Check parameters
;;;147        if ( (flash_type > FLASH_SPACE_TYPE_NVR)  )
0000b2  2801              CMP      r0,#1
0000b4  d809              BHI      |L1.202|
;;;148        {		
;;;149            return ;
;;;150        }
;;;151    
;;;152        address = address & ~(FLASH_SECT_SIZE1 - 1);
0000b6  0a4c              LSRS     r4,r1,#9
0000b8  0264              LSLS     r4,r4,#9
;;;153      
;;;154        while(address < end_address)
0000ba  e004              B        |L1.198|
                  |L1.188|
;;;155        {
;;;156        
;;;157            bim_flash_erase_sector(flash_type,address);
0000bc  0021              MOVS     r1,r4
0000be  0030              MOVS     r0,r6
0000c0  f7fffffe          BL       bim_flash_erase_sector
0000c4  3480              ADDS     r4,r4,#0x80
                  |L1.198|
0000c6  42ac              CMP      r4,r5                 ;154
0000c8  d3f8              BCC      |L1.188|
                  |L1.202|
;;;158            
;;;159           /* Calculate next sector address (below 0x000100) */
;;;160            address += FLASH_SECT_SIZE1/4;
;;;161            
;;;162        }
;;;163    
;;;164        return ;
;;;165    }
0000ca  bd70              POP      {r4-r6,pc}
;;;166    
                          ENDP

                  bim_flash_write PROC
;;;167    void bim_flash_write(uint8_t flash_space, uint32_t address, uint32_t length, uint8_t *buffer)
0000cc  b5f8              PUSH     {r3-r7,lr}
;;;168    {
0000ce  001c              MOVS     r4,r3
0000d0  0015              MOVS     r5,r2
0000d2  000e              MOVS     r6,r1
0000d4  0007              MOVS     r7,r0
;;;169        uint32_t data = 0xffffffff;
;;;170    
;;;171        uint8_t  cnt;
;;;172    
;;;173        //uint8_t 	subcnt;
;;;174    
;;;175        //uint8_t *p_data = (uint8_t *)&data;
;;;176    
;;;177        //uint8_t offset;
;;;178    
;;;179        //uint8_t lenoffset;
;;;180       
;;;181        // Check parameters
;;;182        if ( (flash_space > FLASH_SPACE_TYPE_NVR) || (( length) > bim_flash_env.length[flash_space]) )
0000d6  2801              CMP      r0,#1
0000d8  d82e              BHI      |L1.312|
0000da  494c              LDR      r1,|L1.524|
0000dc  00b8              LSLS     r0,r7,#2              ;168
0000de  5808              LDR      r0,[r1,r0]
0000e0  42a8              CMP      r0,r5
0000e2  d329              BCC      |L1.312|
0000e4  e010              B        |L1.264|
                  |L1.230|
;;;183        {
;;;184            return ;
;;;185        }
;;;186    
;;;187        while(length >= 4)
;;;188        {
;;;189            data = (buffer[0] | (buffer[1] << 8) | (buffer[2] << 16) | (buffer[3] << 24)); 
0000e6  7860              LDRB     r0,[r4,#1]
0000e8  7822              LDRB     r2,[r4,#0]
0000ea  78e1              LDRB     r1,[r4,#3]
0000ec  0200              LSLS     r0,r0,#8
0000ee  4302              ORRS     r2,r2,r0
0000f0  78a0              LDRB     r0,[r4,#2]
0000f2  0609              LSLS     r1,r1,#24
0000f4  0400              LSLS     r0,r0,#16
0000f6  4308              ORRS     r0,r0,r1
0000f8  4302              ORRS     r2,r2,r0
;;;190            
;;;191            bim_flash_writeword(flash_space,address , data);
0000fa  0031              MOVS     r1,r6
0000fc  0038              MOVS     r0,r7
0000fe  f7fffffe          BL       bim_flash_writeword
000102  1d24              ADDS     r4,r4,#4
000104  1f2d              SUBS     r5,r5,#4
000106  1c76              ADDS     r6,r6,#1
                  |L1.264|
000108  2d04              CMP      r5,#4                 ;187
00010a  d2ec              BCS      |L1.230|
;;;192    
;;;193            address += 1;
;;;194            buffer += 4;
;;;195            length -= 4;
;;;196            //bprintf("Data = %x length = %x\r\n",data,length);
;;;197        }
;;;198    
;;;199        if(length != 0)
00010c  2d00              CMP      r5,#0
00010e  d013              BEQ      |L1.312|
;;;200        { /* write last mutil byte */
;;;201            data = 0xffffffff;
000110  2200              MOVS     r2,#0
000112  43d2              MVNS     r2,r2
;;;202    				
;;;203            for(cnt = 0; cnt < length;cnt++)
000114  2000              MOVS     r0,#0
000116  e009              B        |L1.300|
                  |L1.280|
000118  00c1              LSLS     r1,r0,#3
;;;204            {
;;;205                data &= ~(0xff << (8 * cnt));
00011a  23ff              MOVS     r3,#0xff
00011c  408b              LSLS     r3,r3,r1
00011e  439a              BICS     r2,r2,r3
;;;206                data |= (buffer[cnt] << (8 * cnt )) ;
000120  5c23              LDRB     r3,[r4,r0]
000122  408b              LSLS     r3,r3,r1
000124  1c40              ADDS     r0,r0,#1
000126  431a              ORRS     r2,r2,r3
000128  0600              LSLS     r0,r0,#24             ;203
00012a  0e00              LSRS     r0,r0,#24             ;203
                  |L1.300|
00012c  42a8              CMP      r0,r5                 ;203
00012e  d3f3              BCC      |L1.280|
;;;207            }
;;;208    
;;;209            bim_flash_writeword(flash_space,address, data);
000130  0031              MOVS     r1,r6
000132  0038              MOVS     r0,r7
000134  f7fffffe          BL       bim_flash_writeword
                  |L1.312|
;;;210            //	uart_printf("Data2 = 0x%08x length = %d\r\n",Data,length);
;;;211        }
;;;212    
;;;213        return ;
;;;214    }
000138  bdf8              POP      {r3-r7,pc}
;;;215    
                          ENDP

                  bim_flash_read PROC
;;;216    void bim_flash_read(uint8_t flash_space, uint32_t address, uint32_t length, uint8_t *buffer)
00013a  b5f8              PUSH     {r3-r7,lr}
;;;217    {
00013c  0007              MOVS     r7,r0
;;;218        uint32_t data = 0xffffffff;
00013e  2000              MOVS     r0,#0
000140  000e              MOVS     r6,r1                 ;217
000142  43c0              MVNS     r0,r0
;;;219    
;;;220        //uint8_t offset;
;;;221    
;;;222        //uint8_t lenoffset;
;;;223    
;;;224        uint8_t cnt;
;;;225    
;;;226        //uint8_t subcnt;
;;;227        
;;;228        // Check parameters
;;;229        if (  length > bim_flash_env.length[flash_space] )
000144  4931              LDR      r1,|L1.524|
000146  9000              STR      r0,[sp,#0]            ;218
000148  00b8              LSLS     r0,r7,#2              ;218
00014a  5808              LDR      r0,[r1,r0]
00014c  001d              MOVS     r5,r3                 ;217
00014e  0014              MOVS     r4,r2                 ;217
000150  42a0              CMP      r0,r4
000152  d324              BCC      |L1.414|
;;;230        {        
;;;231            return ;
;;;232        }
;;;233    
;;;234        if ( flash_space > FLASH_SPACE_TYPE_NVR )
000154  2f01              CMP      r7,#1
000156  d822              BHI      |L1.414|
000158  e00c              B        |L1.372|
                  |L1.346|
;;;235        {        
;;;236            return ;
;;;237        }
;;;238    
;;;239    
;;;240        while(length >= 4)
;;;241        {
;;;242    			
;;;243            data = bim_flash_readword(flash_space,address);
00015a  0031              MOVS     r1,r6
00015c  0038              MOVS     r0,r7
00015e  f7fffffe          BL       bim_flash_readword
;;;244    		//bprintf("read data0 = %x\r\n",data);		
;;;245            memcpy(buffer, &data, 4);
000162  9000              STR      r0,[sp,#0]
000164  2204              MOVS     r2,#4
000166  0028              MOVS     r0,r5
000168  4669              MOV      r1,sp
00016a  f7fffffe          BL       __aeabi_memcpy
00016e  1f24              SUBS     r4,r4,#4
000170  1d2d              ADDS     r5,r5,#4
000172  1c76              ADDS     r6,r6,#1
                  |L1.372|
000174  2c04              CMP      r4,#4                 ;240
000176  d2f0              BCS      |L1.346|
;;;246    		address += 1;
;;;247            buffer += 4;
;;;248            length -= 4;
;;;249        }
;;;250    
;;;251        if(length != 0)
000178  2c00              CMP      r4,#0
00017a  d010              BEQ      |L1.414|
;;;252        {
;;;253    				
;;;254            /* read last byte */
;;;255            data = bim_flash_readword(flash_space,address);
00017c  0031              MOVS     r1,r6
00017e  0038              MOVS     r0,r7
000180  f7fffffe          BL       bim_flash_readword
;;;256    
;;;257            for(cnt = 0; cnt < length;cnt++)
000184  9000              STR      r0,[sp,#0]
000186  2000              MOVS     r0,#0
000188  e007              B        |L1.410|
                  |L1.394|
;;;258            {
;;;259                *buffer++ = ( data >> (cnt  * 8) & 0xFF );
00018a  9900              LDR      r1,[sp,#0]
00018c  00c2              LSLS     r2,r0,#3              ;257
00018e  40d1              LSRS     r1,r1,r2
000190  1c40              ADDS     r0,r0,#1
000192  0600              LSLS     r0,r0,#24             ;257
000194  0e00              LSRS     r0,r0,#24             ;257
000196  7029              STRB     r1,[r5,#0]
000198  1c6d              ADDS     r5,r5,#1              ;257
                  |L1.410|
00019a  42a0              CMP      r0,r4                 ;257
00019c  d3f5              BCC      |L1.394|
                  |L1.414|
;;;260            }
;;;261    
;;;262        }
;;;263    
;;;264        return ;
;;;265    }
00019e  bdf8              POP      {r3-r7,pc}
;;;266    
                          ENDP

                  bim_wdt_disable PROC
;;;267    void bim_wdt_disable(void)
0001a0  2001              MOVS     r0,#1
;;;268    {
;;;269        REG_AHB0_ICU_WDTCLKCON = 0x1 ; // Step1. WDT clock enable
0001a2  05c1              LSLS     r1,r0,#23
0001a4  61c8              STR      r0,[r1,#0x1c]
;;;270        REG_APB0_WDT_CFG = 0x005A0000;// Step3. Feed dog. Write WDT key: 0x5A firstly and 0xA5 secondly.
0001a6  481b              LDR      r0,|L1.532|
0001a8  212d              MOVS     r1,#0x2d
0001aa  0449              LSLS     r1,r1,#17
0001ac  6001              STR      r1,[r0,#0]
;;;271        REG_APB0_WDT_CFG = 0x00A50000;
0001ae  21a5              MOVS     r1,#0xa5
0001b0  0409              LSLS     r1,r1,#16
0001b2  6001              STR      r1,[r0,#0]
;;;272    }
0001b4  4770              BX       lr
;;;273    void bim_wdt_enable(uint16_t wdt_cnt)
                          ENDP

                  bim_wdt_enable PROC
0001b6  2100              MOVS     r1,#0
;;;274    {
;;;275        //the timer is 48uS @1 CLK
;;;276        //0xffff: 3s
;;;277        REG_AHB0_ICU_WDTCLKCON = 0x0 ; // Step1. WDT clock enable,16M
0001b8  2201              MOVS     r2,#1
0001ba  05d2              LSLS     r2,r2,#23
0001bc  61d1              STR      r1,[r2,#0x1c]
;;;278        REG_APB0_WDT_CFG  = wdt_cnt;   // Step2. Set WDT period=0xFF
0001be  4915              LDR      r1,|L1.532|
0001c0  6008              STR      r0,[r1,#0]
;;;279        // Do two things together: 1. Set WDT period. 2. Write WDT key to feed dog.
;;;280        // Write WDT key: 0x5A firstly and 0xA5 secondly.
;;;281        REG_APB0_WDT_CFG = (0x5A<<16) + wdt_cnt;
0001c2  222d              MOVS     r2,#0x2d
0001c4  0452              LSLS     r2,r2,#17
0001c6  1882              ADDS     r2,r0,r2
0001c8  600a              STR      r2,[r1,#0]
;;;282        REG_APB0_WDT_CFG = (0xA5<<16) + wdt_cnt;
0001ca  22a5              MOVS     r2,#0xa5
0001cc  0412              LSLS     r2,r2,#16
0001ce  1880              ADDS     r0,r0,r2
0001d0  6008              STR      r0,[r1,#0]
;;;283    }
0001d2  4770              BX       lr
;;;284    
                          ENDP

                  bim_flash_unlock PROC
;;;26     
;;;27     static void bim_flash_unlock(void)
0001d4  480e              LDR      r0,|L1.528|
;;;28     {
;;;29         // Unlock all sectors
;;;30         REG_AHB3_MFC_WP0 = 0xA5;
0001d6  21a5              MOVS     r1,#0xa5
0001d8  6101              STR      r1,[r0,#0x10]
;;;31         REG_AHB3_MFC_WP1 = 0xC3;
0001da  21c3              MOVS     r1,#0xc3
0001dc  6141              STR      r1,[r0,#0x14]
;;;32     }
0001de  4770              BX       lr
;;;33      
                          ENDP

                  bim_flash_writeKey PROC
;;;34     static void bim_flash_writeKey(void)
0001e0  490d              LDR      r1,|L1.536|
;;;35     {
;;;36         // write control key
;;;37         REG_AHB3_MFC_KEYWORD = 0x58A9;
0001e2  480b              LDR      r0,|L1.528|
0001e4  6001              STR      r1,[r0,#0]
;;;38         REG_AHB3_MFC_KEYWORD = 0xA958;
0001e6  490d              LDR      r1,|L1.540|
0001e8  6001              STR      r1,[r0,#0]
;;;39     }
0001ea  4770              BX       lr
;;;40     
                          ENDP

                  bim_flash_clearKey PROC
;;;41     static void bim_flash_clearKey(void)
0001ec  4808              LDR      r0,|L1.528|
;;;42     {
;;;43         // write control key
;;;44         REG_AHB3_MFC_KEYWORD = 0x0;
0001ee  2100              MOVS     r1,#0
0001f0  6001              STR      r1,[r0,#0]
;;;45         REG_AHB3_MFC_KEYWORD = 0x0;
0001f2  6001              STR      r1,[r0,#0]
;;;46     }
0001f4  4770              BX       lr
;;;47      
                          ENDP

                  bim_flash_start PROC
;;;48     static void bim_flash_start(void)
0001f6  4806              LDR      r0,|L1.528|
;;;49     {
;;;50         REG_AHB3_MFC_CONTROL |= 0x01;
0001f8  6841              LDR      r1,[r0,#4]
0001fa  2201              MOVS     r2,#1
0001fc  4311              ORRS     r1,r1,r2
0001fe  6041              STR      r1,[r0,#4]
;;;51     }
000200  4770              BX       lr
;;;52     
                          ENDP

                  bim_flash_status PROC
;;;53     static uint8_t bim_flash_status(void)
000202  4803              LDR      r0,|L1.528|
;;;54     {
;;;55         return REG_AHB3_MFC_CONTROL & 0x01;
000204  6840              LDR      r0,[r0,#4]
000206  07c0              LSLS     r0,r0,#31
000208  0fc0              LSRS     r0,r0,#31
;;;56     }
00020a  4770              BX       lr
;;;57     
                          ENDP

                  |L1.524|
                          DCD      ||.bss||
                  |L1.528|
                          DCD      0x00803000
                  |L1.532|
                          DCD      0x00806000
                  |L1.536|
                          DCD      0x000058a9
                  |L1.540|
                          DCD      0x0000a958

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bim_flash_env
                          %        12
