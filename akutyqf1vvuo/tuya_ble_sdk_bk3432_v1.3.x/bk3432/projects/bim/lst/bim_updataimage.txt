; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --thumb --list --debug -c --asm --interleave -o.\obj\bim_updataimage.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bim_updataimage.d --cpu=ARM9E --apcs=interwork -O3 --diag_suppress=9931 -I.\config -I.\app -I..\..\libs -I..\..\sdk\plactform\core_modules\src -I..\..\sdk\plactform\arch -I..\..\sdk\plactform\arch\compiler -I..\..\sdk\plactform\arch\ll -I..\..\sdk\plactform\core_modules\common\api -I..\..\sdk\plactform\arch\boot -I..\..\sdk\plactform\core_modules\dbg\api -I..\..\sdk\plactform\core_modules\rf\api -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\plactform\arch\main -I..\..\sdk\plactform\core_modules\util -I..\..\sdk\plactform\driver\pwm -I..\..\sdk\plactform\driver\adc -I..\..\sdk\plactform\driver\audio -I..\..\sdk\plactform\driver\wdt -I..\..\sdk\plactform\driver\rtc -I..\..\sdk\plactform\driver\i2c -I..\..\sdk\plactform\driver\utc -I..\..\sdk\plactform\driver\ir -I..\..\sdk\plactform\driver\spi -I..\..\sdk\plactform\driver\plf -I..\..\sdk\plactform\driver\counter -I..\..\sdk\plactform\driver\gpio -I..\..\sdk\plactform\driver\intcntl -I..\..\sdk\plactform\driver\icu -I..\..\sdk\plactform\driver\intc -I..\..\sdk\plactform\driver\flash -I..\..\sdk\plactform\driver\timer -I..\..\sdk\plactform\driver\reg -I..\..\sdk\plactform\driver\uart -I..\..\sdk\plactform\driver\emi -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\src -I..\..\sdk\plactform\reg -I..\..\sdk\plactform\driver\syscntl -I..\..\sdk\plactform\rom\hci -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\ble_stack\inc -I..\..\sdk\ble_stack\inc\hci -I..\..\sdk\ble_stack\inc\h4tl -I..\..\sdk\ble_stack\inc\ke -I..\..\sdk\ble_stack\inc\nvds -I..\..\sdk\ble_stack\inc\ea -I..\..\sdk\ble_stack\inc\em -I..\..\sdk\ble_stack\inc\ahi -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapc -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapm -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpc -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\atts -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattm -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cc -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cm -I..\..\sdk\ble_stack\inc\ble\ll\em -I..\..\sdk\ble_stack\inc\ble\ll\llc -I..\..\sdk\ble_stack\inc\ble\ll\lld -I..\..\sdk\ble_stack\inc\ble\ll\llm -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\inc\ble\hl\gap -I..\..\sdk\ble_stack\inc\ble\hl\gatt -I..\..\sdk\ble_stack\com\prf -I..\..\sdk\ble_stack\com\profiles\dis\diss\src -I..\..\sdk\ble_stack\com\profiles\bas\bass\src -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\api -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\src -I..\..\sdk\ble_stack\com\profiles\ancs -I..\..\sdk\ble_stack\com\profiles\FCC0\api -I..\..\sdk\ble_stack\com\profiles\FCC0\src -I..\..\sdk\ble_stack\com\profiles\FCC0\util -I..\..\sdk\ble_stack\com\profiles\FEE0\api -I..\..\sdk\ble_stack\com\profiles\FEE0\src -I..\..\sdk\ble_stack\com\profiles\hogp -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\api -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\src -I..\..\libs -I..\..\sdk\ble_stack\com\profiles\wechat\api -I..\..\sdk\ble_stack\com\profiles\wechat\src -I.\wechat -I..\..\sdk\ble_stack\com\profiles\bas\bass -I..\..\sdk\ble_stack\com\profiles\bas\bass\api -I..\..\sdk\ble_stack\com\profiles\dis\diss -I..\..\sdk\ble_stack\com\profiles\dis\diss\api -I..\..\sdk\ble_stack\com\profiles\FFF0\api -I..\..\sdk\ble_stack\com\profiles\FFF0 -I..\..\sdk\ble_stack\com\profiles\oad\api -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=532 --omf_browse=.\obj\bim_updataimage.crf app\bim_updataImage.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bim_get_psec_image_header PROC
;;;11     
;;;12     uint32_t bim_get_psec_image_header(void)
000000  49b2              LDR      r1,|L1.716|
;;;13     {
000002  b510              PUSH     {r4,lr}
;;;14     	uint32_t sec_image_oad_header_fddr;
;;;15     	
;;;16     	if(hdr_back.uid == OAD_APP_PART_UID)
000004  6889              LDR      r1,[r1,#8]  ; hdr_back
000006  4ab2              LDR      r2,|L1.720|
000008  4291              CMP      r1,r2
00000a  d100              BNE      |L1.14|
;;;17     	{
;;;18     		sec_image_oad_header_fddr = SEC_IMAGE_OAD_HEADER_APP_FADDR;
00000c  48b1              LDR      r0,|L1.724|
                  |L1.14|
;;;19     	}
;;;20         //bim_printf("sec_image_oad_header_fddr = ", sec_image_oad_header_fddr,16 );
;;;21         //bim_uart_write("\r\n");
;;;22         bim_flash_read(FLASH_SPACE_TYPE_MAIN, sec_image_oad_header_fddr/4, sizeof(img_hdr_t), (uint8_t *)&hdr_img);
00000e  4baf              LDR      r3,|L1.716|
000010  0881              LSRS     r1,r0,#2
000012  3b10              SUBS     r3,r3,#0x10
000014  2210              MOVS     r2,#0x10
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       bim_flash_read
;;;23     
;;;24     	//bim_printf("hdr_img.crc = ",hdr_img.crc,16);
;;;25         //bim_uart_write("\r\n");
;;;26     /*    
;;;27     	bim_printf("hdr_img.crc_status = ",hdr_img.crc_status,16);
;;;28         bim_uart_write("\r\n");
;;;29     	bim_printf("hdr_img.len = ",hdr_img.len,16);
;;;30         bim_uart_write("\r\n");
;;;31     	bim_printf("hdr_img.rom_ver = ",hdr_img.rom_ver,16);
;;;32         bim_uart_write("\r\n");
;;;33     	bim_printf("hdr_img.sec_status = ",hdr_img.sec_status,16);
;;;34         bim_uart_write("\r\n");
;;;35     	bim_printf("hdr_img.ver = ",hdr_img.ver,16);
;;;36         bim_uart_write("\r\n");
;;;37     	bim_printf("hdr_img.uid = ",hdr_img.uid,16);
;;;38         bim_uart_write("\r\n");
;;;39     */	
;;;40        	return 0;
00001c  2000              MOVS     r0,#0
;;;41     }
00001e  bd10              POP      {r4,pc}
;;;42      
                          ENDP

                  bim_get_psec_backup_header PROC
;;;43     uint32_t bim_get_psec_backup_header(void)
000020  2137              MOVS     r1,#0x37
;;;44     {
000022  b510              PUSH     {r4,lr}
;;;45     	//UART_PRINTF("udi_get_psec_backup_header addr = 0x%x\r\n",SEC_BACKUP_OAD_HEADER_FADDR);
;;;46         bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_BACKUP_OAD_HEADER_FADDR/4, sizeof(img_hdr_t), (uint8_t *)&hdr_back);
000024  4ba9              LDR      r3,|L1.716|
000026  2210              MOVS     r2,#0x10
000028  0249              LSLS     r1,r1,#9
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       bim_flash_read
;;;47     	
;;;48     	//bim_printf("hdr_back.crc = ",hdr_back.crc, 16);
;;;49     	//bim_uart_write("\r\n");
;;;50     /*	
;;;51     	bim_printf("hdr_back.crc_status = ",hdr_back.crc_status, 16);
;;;52     	bim_uart_write("\r\n");
;;;53     	bim_printf("hdr_back.len = ",hdr_back.len, 16);
;;;54     	bim_uart_write("\r\n");
;;;55     	bim_printf("hdr_img.rom_ver = ",hdr_back.rom_ver, 16);
;;;56     	bim_uart_write("\r\n");
;;;57     	bim_printf("hdr_back.sec_status = ",hdr_back.sec_status, 16);
;;;58     	bim_uart_write("\r\n");
;;;59     	bim_printf("hdr_back.ver = ",hdr_back.ver, 16);
;;;60     	bim_uart_write("\r\n");
;;;61     	bim_printf("hdr_back.uid = ",hdr_back.uid, 16);
;;;62     	bim_uart_write("\r\n");
;;;63     */	
;;;64     	return 0;
000030  2000              MOVS     r0,#0
;;;65     }
000032  bd10              POP      {r4,pc}
;;;66     
                          ENDP

                  calc_image_sec_crc PROC
;;;68     uint32_t make_crc32(uint32_t crc,unsigned char *string,uint32_t size);
;;;69     uint32_t calc_image_sec_crc(void)
000034  b5f0              PUSH     {r4-r7,lr}
;;;70     {	
;;;71     	uint8_t data[BLOCK_SIZE];
;;;72     	uint8_t tmp_data[BLOCK_SIZE];
;;;73     	uint32_t block_total;
;;;74     	uint32_t read_addr;
;;;75     	uint32_t calcuCrc = 0xffffffff;
000036  2000              MOVS     r0,#0
000038  43c0              MVNS     r0,r0
00003a  b089              SUB      sp,sp,#0x24           ;70
;;;76     	make_crc32_table();
00003c  9004              STR      r0,[sp,#0x10]
00003e  f7fffffe          BL       make_crc32_table
;;;77     	block_total =  hdr_img.len / 4 - 1;// not clac HDR
000042  48a2              LDR      r0,|L1.716|
000044  3810              SUBS     r0,r0,#0x10
000046  88c1              LDRH     r1,[r0,#6]  ; hdr_img
;;;78     
;;;79     	if(hdr_img.uid == OAD_APP_PART_UID)
000048  6880              LDR      r0,[r0,#8]  ; hdr_img
00004a  088e              LSRS     r6,r1,#2              ;77
00004c  49a0              LDR      r1,|L1.720|
00004e  1e76              SUBS     r6,r6,#1
000050  4288              CMP      r0,r1
000052  d101              BNE      |L1.88|
;;;80     	{
;;;81     		read_addr = SEC_IMAGE_RUN_APP_FADDR;   // 108k
000054  4d9f              LDR      r5,|L1.724|
000056  3510              ADDS     r5,r5,#0x10
                  |L1.88|
;;;82     	}
;;;83     	//UART_PRINTF("read start addr = 0x%x\r\n",read_addr);
;;;84     	for(uint32_t i = 0;i < block_total; i++)
000058  2400              MOVS     r4,#0
00005a  e014              B        |L1.134|
                  |L1.92|
;;;85     	{
;;;86             bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, data);
00005c  08af              LSRS     r7,r5,#2
00005e  2210              MOVS     r2,#0x10
000060  0039              MOVS     r1,r7
000062  2000              MOVS     r0,#0
000064  466b              MOV      r3,sp
000066  f7fffffe          BL       bim_flash_read
;;;87             bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, tmp_data);
00006a  2210              MOVS     r2,#0x10
00006c  0039              MOVS     r1,r7
00006e  2000              MOVS     r0,#0
000070  ab05              ADD      r3,sp,#0x14
000072  f7fffffe          BL       bim_flash_read
;;;88     		calcuCrc = make_crc32(calcuCrc,data,BLOCK_SIZE);
000076  9804              LDR      r0,[sp,#0x10]
000078  2210              MOVS     r2,#0x10
00007a  4669              MOV      r1,sp
00007c  f7fffffe          BL       make_crc32
000080  1c64              ADDS     r4,r4,#1
000082  3510              ADDS     r5,r5,#0x10
000084  9004              STR      r0,[sp,#0x10]
                  |L1.134|
000086  42b4              CMP      r4,r6                 ;84
000088  d3e8              BCC      |L1.92|
;;;89     		
;;;90     		read_addr+= BLOCK_SIZE;
;;;91     	}
;;;92     	//UART_PRINTF("read end addr = 0x%x,calcuCrc = 0x%08x\r\n",read_addr,calcuCrc);
;;;93     	
;;;94     	return calcuCrc;
00008a  9804              LDR      r0,[sp,#0x10]
                  |L1.140|
;;;95     }
00008c  b009              ADD      sp,sp,#0x24
00008e  bdf0              POP      {r4-r7,pc}
;;;96     
                          ENDP

                  calc_backup_sec_crc PROC
;;;97     uint32_t calc_backup_sec_crc(void)
000090  b5f0              PUSH     {r4-r7,lr}
;;;98     {
;;;99     	//UART_PRINTF("%s\r\n",__func__);
;;;100    	uint8_t data[BLOCK_SIZE];
;;;101    	uint8_t tmp_data[BLOCK_SIZE];
;;;102    	uint16_t block_total;
;;;103    	uint32_t read_addr;
;;;104    	uint32_t calcuCrc = 0xffffffff;
000092  2000              MOVS     r0,#0
000094  43c0              MVNS     r0,r0
000096  b089              SUB      sp,sp,#0x24           ;98
;;;105    	make_crc32_table();
000098  9004              STR      r0,[sp,#0x10]
00009a  f7fffffe          BL       make_crc32_table
;;;106    	block_total = hdr_back.len / 4 - 1;
00009e  488b              LDR      r0,|L1.716|
;;;107    	read_addr = SEC_BACKUP_OAD_IMAGE_FADDR;
0000a0  4d8d              LDR      r5,|L1.728|
0000a2  88c0              LDRH     r0,[r0,#6]            ;106  ; hdr_back
0000a4  0880              LSRS     r0,r0,#2              ;106
0000a6  1e40              SUBS     r0,r0,#1              ;106
0000a8  0406              LSLS     r6,r0,#16             ;106
0000aa  0c36              LSRS     r6,r6,#16             ;106
;;;108    	//UART_PRINTF("read start addr = 0x%x\r\n",read_addr);
;;;109    	//bim_printf("block_total=", block_total, 10);
;;;110    	//bim_uart_write("\r\n");
;;;111    	for(uint32_t i = 0;i < block_total; i++)
0000ac  2400              MOVS     r4,#0
0000ae  e014              B        |L1.218|
                  |L1.176|
;;;112    	{
;;;113            bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, data);
0000b0  08af              LSRS     r7,r5,#2
0000b2  2210              MOVS     r2,#0x10
0000b4  0039              MOVS     r1,r7
0000b6  2000              MOVS     r0,#0
0000b8  466b              MOV      r3,sp
0000ba  f7fffffe          BL       bim_flash_read
;;;114            bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, tmp_data);
0000be  2210              MOVS     r2,#0x10
0000c0  0039              MOVS     r1,r7
0000c2  2000              MOVS     r0,#0
0000c4  ab05              ADD      r3,sp,#0x14
0000c6  f7fffffe          BL       bim_flash_read
;;;115    		calcuCrc = make_crc32(calcuCrc,data,BLOCK_SIZE);
0000ca  9804              LDR      r0,[sp,#0x10]
0000cc  2210              MOVS     r2,#0x10
0000ce  4669              MOV      r1,sp
0000d0  f7fffffe          BL       make_crc32
0000d4  1c64              ADDS     r4,r4,#1
0000d6  3510              ADDS     r5,r5,#0x10
0000d8  9004              STR      r0,[sp,#0x10]
                  |L1.218|
0000da  42b4              CMP      r4,r6                 ;111
0000dc  d3e8              BCC      |L1.176|
;;;116    		read_addr+= BLOCK_SIZE;
;;;117    		
;;;118    	}
;;;119    //	UART_PRINTF("read end addr = 0x%x,calcuCrc = 0x%08x\r\n",read_addr,calcuCrc);
;;;120    //	bim_printf("crc=", calcuCrc, 16);
;;;121    //	bim_uart_write("\r\n");
;;;122    	
;;;123    	return calcuCrc;
0000de  9804              LDR      r0,[sp,#0x10]
;;;124    }
0000e0  e7d4              B        |L1.140|
;;;125    
                          ENDP

                  bim_check_image_sec_status PROC
;;;127    
;;;128    uint8_t bim_check_image_sec_status(void)
0000e2  b5f8              PUSH     {r3-r7,lr}
;;;129    {	
;;;130    	bim_get_psec_image_header();
0000e4  f7fffffe          BL       bim_get_psec_image_header
;;;131    
;;;132    	if(hdr_img.uid == OAD_APP_PART_UID)
0000e8  4c78              LDR      r4,|L1.716|
0000ea  4979              LDR      r1,|L1.720|
0000ec  3c10              SUBS     r4,r4,#0x10
0000ee  68a0              LDR      r0,[r4,#8]  ; hdr_img
0000f0  4288              CMP      r0,r1
0000f2  d152              BNE      |L1.410|
;;;133    	{
;;;134    		if(CRC_UNCHECK == hdr_img.crc_status) // image not crc check and image is exist ,do crc calc
0000f4  7b20              LDRB     r0,[r4,#0xc]  ; hdr_img
;;;135    		{
;;;136    			if(hdr_img.len != 0xffff && (hdr_img.len / 4)<= SEC_MAX_FSIZE_APP_BLOCK)
;;;137    			{
;;;138    				if(hdr_img.crc == calc_image_sec_crc()) // crc ok
;;;139    				{
;;;140    					//bim_uart_write("check crc OK!!!\r\n");
;;;141    					hdr_img.crc_status = CRC_CHECK_OK;
;;;142    					hdr_img.sec_status = SECT_NORMAL;
;;;143                        bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
0000f6  4e79              LDR      r6,|L1.732|
0000f8  27aa              MOVS     r7,#0xaa              ;141
;;;144                        bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;145                        bim_get_psec_image_header();				
;;;146    					return SSTATUS_SECT_NORMAL;
;;;147    				}
;;;148    	            else
;;;149    	            {
;;;150    	            	//bim_uart_write("check crc fail!!!\r\n");
;;;151    					hdr_img.crc_status = CRC_CHECK_FAIL;
0000fa  2555              MOVS     r5,#0x55
0000fc  28ff              CMP      r0,#0xff              ;134
0000fe  d004              BEQ      |L1.266|
;;;152    					hdr_img.sec_status = SECT_ABNORMAL;	
;;;153    					bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;154                        bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;155    					return SSTATUS_SECT_ABNORMAL;
;;;156    				}
;;;157    			}
;;;158    			else if(hdr_img.rom_ver == 0xffff)
;;;159    			{
;;;160    				return SSTATUS_SECT_ERASED;
;;;161    			}
;;;162    	        else
;;;163    			{
;;;164    				hdr_img.crc_status = CRC_CHECK_FAIL;
;;;165    				hdr_img.sec_status = SECT_ABNORMAL;
;;;166                    bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;167                    bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;168    				return SSTATUS_SECT_ABNORMAL;
;;;169    			}
;;;170    			
;;;171    		}    
;;;172    		else if(CRC_CHECK_FAIL == hdr_img.crc_status)
000100  2855              CMP      r0,#0x55
000102  d038              BEQ      |L1.374|
;;;173    		{
;;;174    		  	hdr_img.crc_status = CRC_CHECK_FAIL;
;;;175    			hdr_img.sec_status = SECT_ABNORMAL;	
;;;176                bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;177                bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;178    			return SSTATUS_SECT_ABNORMAL;
;;;179    		}
;;;180    		else if(CRC_CHECK_OK == hdr_img.crc_status)
000104  28aa              CMP      r0,#0xaa
000106  d024              BEQ      |L1.338|
000108  e035              B        |L1.374|
                  |L1.266|
00010a  88e1              LDRH     r1,[r4,#6]            ;136  ; hdr_img
00010c  4874              LDR      r0,|L1.736|
00010e  4281              CMP      r1,r0                 ;136
000110  d01a              BEQ      |L1.328|
000112  4a74              LDR      r2,|L1.740|
000114  4291              CMP      r1,r2                 ;136
000116  d817              BHI      |L1.328|
000118  f7fffffe          BL       calc_image_sec_crc
00011c  6821              LDR      r1,[r4,#0]            ;138  ; hdr_img
00011e  4288              CMP      r0,r1                 ;138
000120  d129              BNE      |L1.374|
000122  4b6a              LDR      r3,|L1.716|
000124  7327              STRB     r7,[r4,#0xc]          ;141
000126  3b10              SUBS     r3,r3,#0x10           ;143
000128  2210              MOVS     r2,#0x10              ;143
00012a  0031              MOVS     r1,r6                 ;143
00012c  2000              MOVS     r0,#0                 ;143
00012e  7367              STRB     r7,[r4,#0xd]          ;142
000130  f7fffffe          BL       bim_flash_write
000134  4b65              LDR      r3,|L1.716|
000136  2210              MOVS     r2,#0x10              ;144
000138  3b10              SUBS     r3,r3,#0x10           ;144
00013a  0031              MOVS     r1,r6                 ;144
00013c  2000              MOVS     r0,#0                 ;144
00013e  f7fffffe          BL       bim_flash_read
000142  f7fffffe          BL       bim_get_psec_image_header
000146  e014              B        |L1.370|
                  |L1.328|
000148  89e1              LDRH     r1,[r4,#0xe]          ;158  ; hdr_img
00014a  4281              CMP      r1,r0                 ;158
00014c  d113              BNE      |L1.374|
00014e  2001              MOVS     r0,#1                 ;160
;;;181    		{
;;;182    		  	hdr_img.crc_status = CRC_CHECK_OK;
;;;183    			hdr_img.sec_status = SECT_NORMAL;
;;;184                bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;185                bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;186    			return SSTATUS_SECT_NORMAL;
;;;187    		}else
;;;188    		{
;;;189    		  	hdr_img.crc_status = CRC_CHECK_FAIL;
;;;190    			hdr_img.sec_status = SECT_ABNORMAL;
;;;191                bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;192                bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;193    			return SSTATUS_SECT_ABNORMAL;
;;;194    		}
;;;195    	}
;;;196    	else 
;;;197    	{
;;;198    		//bim_uart_write("bim_check_image_sec_status: ERROR, UNKNOWN UID\r\n");
;;;199    		return SSTATUS_SECT_UNKOWN;
;;;200    	}
;;;201    }
000150  bdf8              POP      {r3-r7,pc}
                  |L1.338|
000152  4b5e              LDR      r3,|L1.716|
000154  7327              STRB     r7,[r4,#0xc]          ;182
000156  3b10              SUBS     r3,r3,#0x10           ;184
000158  2210              MOVS     r2,#0x10              ;184
00015a  0031              MOVS     r1,r6                 ;184
00015c  2000              MOVS     r0,#0                 ;184
00015e  7367              STRB     r7,[r4,#0xd]          ;183
000160  f7fffffe          BL       bim_flash_write
000164  4b59              LDR      r3,|L1.716|
000166  2210              MOVS     r2,#0x10              ;185
000168  3b10              SUBS     r3,r3,#0x10           ;185
00016a  0031              MOVS     r1,r6                 ;185
00016c  2000              MOVS     r0,#0                 ;185
00016e  f7fffffe          BL       bim_flash_read
                  |L1.370|
000172  2000              MOVS     r0,#0                 ;186
000174  bdf8              POP      {r3-r7,pc}
                  |L1.374|
000176  4b55              LDR      r3,|L1.716|
000178  7325              STRB     r5,[r4,#0xc]          ;189
00017a  3b10              SUBS     r3,r3,#0x10           ;191
00017c  2210              MOVS     r2,#0x10              ;191
00017e  0031              MOVS     r1,r6                 ;191
000180  2000              MOVS     r0,#0                 ;191
000182  7365              STRB     r5,[r4,#0xd]          ;190
000184  f7fffffe          BL       bim_flash_write
000188  4b50              LDR      r3,|L1.716|
00018a  2210              MOVS     r2,#0x10              ;192
00018c  3b10              SUBS     r3,r3,#0x10           ;192
00018e  0031              MOVS     r1,r6                 ;192
000190  2000              MOVS     r0,#0                 ;192
000192  f7fffffe          BL       bim_flash_read
000196  2002              MOVS     r0,#2                 ;193
000198  bdf8              POP      {r3-r7,pc}
                  |L1.410|
00019a  2003              MOVS     r0,#3                 ;199
00019c  bdf8              POP      {r3-r7,pc}
;;;202    
                          ENDP

                  bim_check_backup_sec_status PROC
;;;203     
;;;204    uint8_t bim_check_backup_sec_status(void)//NOT WRITE INFO TO FLASH
00019e  b570              PUSH     {r4-r6,lr}
;;;205    {	
;;;206    	bim_get_psec_backup_header();
0001a0  f7fffffe          BL       bim_get_psec_backup_header
;;;207    
;;;208        if(hdr_back.rom_ver == 0xffff || hdr_back.ver == 0xffff)
0001a4  4c49              LDR      r4,|L1.716|
0001a6  484e              LDR      r0,|L1.736|
0001a8  89e1              LDRH     r1,[r4,#0xe]  ; hdr_back
0001aa  4281              CMP      r1,r0
0001ac  d002              BEQ      |L1.436|
0001ae  88a1              LDRH     r1,[r4,#4]  ; hdr_back
0001b0  4281              CMP      r1,r0
0001b2  d101              BNE      |L1.440|
                  |L1.436|
;;;209    	{
;;;210    		return SSTATUS_SECT_ERASED;
0001b4  2001              MOVS     r0,#1
;;;211    	}
;;;212    	
;;;213    	if(hdr_back.uid == OAD_APP_PART_UID)
;;;214    	{
;;;215    		if(CRC_UNCHECK == hdr_back.crc_status) // image not crc check and image is exist ,do crc calc
;;;216    		{
;;;217    			if(hdr_back.len != 0xffff && (hdr_back.len / 4) <= SEC_MAX_FSIZE_APP_BLOCK)
;;;218    			{
;;;219    				if(hdr_back.crc == calc_backup_sec_crc()) // crc ok
;;;220    				{
;;;221    					//bim_uart_write("crc ok\r\n");
;;;222    					hdr_back.crc_status = CRC_CHECK_OK;
;;;223    					hdr_back.sec_status = SECT_NORMAL;	
;;;224    					return SSTATUS_SECT_NORMAL;
;;;225    				}else
;;;226    				{	
;;;227    					//bim_uart_write("crc error\r\n");
;;;228    					hdr_back.crc_status = CRC_CHECK_FAIL;
;;;229    					hdr_back.sec_status = SECT_ABNORMAL;
;;;230    					return SSTATUS_SECT_ABNORMAL;
;;;231    				}
;;;232    			}
;;;233    	        else
;;;234    			{
;;;235    				hdr_back.crc_status = CRC_CHECK_FAIL;
;;;236    				hdr_back.sec_status = SECT_ABNORMAL;		
;;;237    				return SSTATUS_SECT_ABNORMAL;
;;;238    			}
;;;239    		}
;;;240    		else if(CRC_CHECK_FAIL == hdr_back.crc_status)
;;;241    		{
;;;242    			hdr_back.crc_status = CRC_CHECK_FAIL;
;;;243    			hdr_back.sec_status = SECT_ABNORMAL;	
;;;244    			return SSTATUS_SECT_ABNORMAL;
;;;245    		}
;;;246    		else if(CRC_CHECK_OK == hdr_back.crc_status)
;;;247    		{
;;;248    			hdr_back.crc_status = CRC_CHECK_OK;
;;;249    			hdr_back.sec_status = SECT_NORMAL;
;;;250    			return SSTATUS_SECT_NORMAL;
;;;251    		}else
;;;252    		{
;;;253    			hdr_back.crc_status = CRC_CHECK_FAIL;
;;;254    			hdr_back.sec_status = SECT_ABNORMAL;
;;;255    			return SSTATUS_SECT_ABNORMAL;
;;;256    		}
;;;257    	}
;;;258    	else 
;;;259    	{
;;;260    		//UART_PRINTF("bim_check_backup_sec_status: ERROR, UNKNOWN UID\r\n");
;;;261    		return SSTATUS_SECT_UNKOWN;
;;;262    	}
;;;263    }
0001b6  bd70              POP      {r4-r6,pc}
                  |L1.440|
0001b8  4a45              LDR      r2,|L1.720|
0001ba  68a1              LDR      r1,[r4,#8]            ;213  ; hdr_back
0001bc  4291              CMP      r1,r2                 ;213
0001be  d11c              BNE      |L1.506|
0001c0  7b21              LDRB     r1,[r4,#0xc]          ;215  ; hdr_back
0001c2  26aa              MOVS     r6,#0xaa              ;222
0001c4  2555              MOVS     r5,#0x55              ;228
0001c6  29ff              CMP      r1,#0xff              ;215
0001c8  d004              BEQ      |L1.468|
0001ca  2955              CMP      r1,#0x55              ;240
0001cc  d011              BEQ      |L1.498|
0001ce  29aa              CMP      r1,#0xaa              ;246
0001d0  d00b              BEQ      |L1.490|
0001d2  e00e              B        |L1.498|
                  |L1.468|
0001d4  88e1              LDRH     r1,[r4,#6]            ;217  ; hdr_back
0001d6  4281              CMP      r1,r0                 ;217
0001d8  d00b              BEQ      |L1.498|
0001da  4842              LDR      r0,|L1.740|
0001dc  4281              CMP      r1,r0                 ;217
0001de  d808              BHI      |L1.498|
0001e0  f7fffffe          BL       calc_backup_sec_crc
0001e4  6821              LDR      r1,[r4,#0]            ;219  ; hdr_back
0001e6  4288              CMP      r0,r1                 ;219
0001e8  d103              BNE      |L1.498|
                  |L1.490|
0001ea  7326              STRB     r6,[r4,#0xc]          ;248
0001ec  2000              MOVS     r0,#0                 ;250
0001ee  7366              STRB     r6,[r4,#0xd]          ;249
0001f0  bd70              POP      {r4-r6,pc}
                  |L1.498|
0001f2  7325              STRB     r5,[r4,#0xc]          ;253
0001f4  2002              MOVS     r0,#2                 ;255
0001f6  7365              STRB     r5,[r4,#0xd]          ;254
0001f8  bd70              POP      {r4-r6,pc}
                  |L1.506|
0001fa  2003              MOVS     r0,#3                 ;261
0001fc  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP

                  bim_erase_image_sec PROC
;;;266    
;;;267    void bim_erase_image_sec(void)  
0001fe  b570              PUSH     {r4-r6,lr}
;;;268    {
;;;269    	if(hdr_back.uid == OAD_APP_PART_UID)  //25k
000200  4832              LDR      r0,|L1.716|
000202  4933              LDR      r1,|L1.720|
000204  6880              LDR      r0,[r0,#8]  ; hdr_back
000206  4288              CMP      r0,r1
000208  d10e              BNE      |L1.552|
;;;270    	{
;;;271    		//bim_uart_write("udi_erase_image_sec \r\n");
;;;272            //bim_flash_erase(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_ALLOC_START_APP_FADDR/4, 25*1024/4);
;;;273            uint32_t earse_addr = SEC_IMAGE_ALLOC_START_APP_FADDR;
00020a  2541              MOVS     r5,#0x41
00020c  02ad              LSLS     r5,r5,#10
;;;274            for(uint8_t i=0; i<SEC_IMAGE_APP*2; i++)
00020e  2400              MOVS     r4,#0
                  |L1.528|
;;;275            {
;;;276                bim_flash_erase_sector(FLASH_SPACE_TYPE_MAIN, earse_addr/4);
000210  08a9              LSRS     r1,r5,#2
000212  2000              MOVS     r0,#0
000214  f7fffffe          BL       bim_flash_erase_sector
000218  1c64              ADDS     r4,r4,#1
00021a  35ff              ADDS     r5,r5,#0xff           ;274
00021c  0624              LSLS     r4,r4,#24             ;274
00021e  35ff              ADDS     r5,r5,#0xff           ;274
000220  0e24              LSRS     r4,r4,#24             ;274
000222  3502              ADDS     r5,#2                 ;274
000224  2c5a              CMP      r4,#0x5a              ;274
000226  d3f3              BCC      |L1.528|
                  |L1.552|
;;;277                earse_addr += 512;
;;;278            }
;;;279            //bim_uart_write("udi_erase_image_sec end\r\n");
;;;280    	}
;;;281    }
000228  bd70              POP      {r4-r6,pc}
;;;282    
                          ENDP

                  bim_erase_backup_sec PROC
;;;284    
;;;285    void bim_erase_backup_sec(void)
00022a  b570              PUSH     {r4-r6,lr}
;;;286    {
;;;287    	//bim_uart_write("udi_erase_backup_sec \r\n");   
;;;288    	//bim_flash_erase(FLASH_SPACE_TYPE_MAIN, SEC_BACKUP_ALLOC_START_FADDR/4, 26*1024/4);
;;;289        uint32_t earse_addr = SEC_BACKUP_ALLOC_START_FADDR;
00022c  2537              MOVS     r5,#0x37
00022e  02ed              LSLS     r5,r5,#11
;;;290        //for(uint8_t i=0; i<52; i++)
;;;291        for(uint8_t i=0; i<SEC_IMAGE_APP*2; i++)
000230  2400              MOVS     r4,#0
                  |L1.562|
;;;292        {
;;;293            bim_flash_erase_sector(FLASH_SPACE_TYPE_MAIN, earse_addr/4);
000232  08a9              LSRS     r1,r5,#2
000234  2000              MOVS     r0,#0
000236  f7fffffe          BL       bim_flash_erase_sector
00023a  1c64              ADDS     r4,r4,#1
00023c  35ff              ADDS     r5,r5,#0xff           ;291
00023e  0624              LSLS     r4,r4,#24             ;291
000240  35ff              ADDS     r5,r5,#0xff           ;291
000242  0e24              LSRS     r4,r4,#24             ;291
000244  3502              ADDS     r5,#2                 ;291
000246  2c5a              CMP      r4,#0x5a              ;291
000248  d3f3              BCC      |L1.562|
;;;294            earse_addr += 512;
;;;295        }
;;;296        //bim_uart_write("udi_erase_backup_sec end\r\n");
;;;297    }
00024a  bd70              POP      {r4-r6,pc}
;;;298    
                          ENDP

                  bim_updata_backup_to_image_sec PROC
;;;300    
;;;301    void bim_updata_backup_to_image_sec(void)
00024c  b57f              PUSH     {r0-r6,lr}
;;;302    {
;;;303    	//bim_uart_write("udi_updata_backup_to_image_sec\r\n");
;;;304    	uint8_t data[BLOCK_SIZE];
;;;305    	uint32_t backup_size = hdr_back.len * 4;
00024e  481f              LDR      r0,|L1.716|
;;;306    	uint32_t read_end_addr = SEC_BACKUP_OAD_HEADER_FADDR + backup_size;
000250  2437              MOVS     r4,#0x37
000252  88c1              LDRH     r1,[r0,#6]            ;305  ; hdr_back
000254  02e4              LSLS     r4,r4,#11
;;;307    	uint32_t write_addr;
;;;308    
;;;309    	if(hdr_back.uid == OAD_APP_PART_UID) // only app part
000256  6880              LDR      r0,[r0,#8]  ; hdr_back
000258  0089              LSLS     r1,r1,#2              ;305
00025a  190e              ADDS     r6,r1,r4              ;306
00025c  491c              LDR      r1,|L1.720|
00025e  4288              CMP      r0,r1
000260  d10f              BNE      |L1.642|
;;;310    	{
;;;311    		write_addr = SEC_IMAGE_OAD_HEADER_APP_FADDR;
000262  4d1c              LDR      r5,|L1.724|
000264  e00d              B        |L1.642|
                  |L1.614|
;;;312    	}
;;;313    
;;;314    	for(uint32_t read_addr = SEC_BACKUP_OAD_HEADER_FADDR;read_addr < read_end_addr;)
;;;315    	{
;;;316            bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, data);
000266  08a1              LSRS     r1,r4,#2
000268  2210              MOVS     r2,#0x10
00026a  2000              MOVS     r0,#0
00026c  466b              MOV      r3,sp
00026e  f7fffffe          BL       bim_flash_read
;;;317            bim_flash_write(FLASH_SPACE_TYPE_MAIN, write_addr/4, BLOCK_SIZE, data);
000272  08a9              LSRS     r1,r5,#2
000274  2210              MOVS     r2,#0x10
000276  2000              MOVS     r0,#0
000278  466b              MOV      r3,sp
00027a  f7fffffe          BL       bim_flash_write
00027e  3410              ADDS     r4,r4,#0x10
000280  3510              ADDS     r5,r5,#0x10
                  |L1.642|
000282  42b4              CMP      r4,r6                 ;314
000284  d3ef              BCC      |L1.614|
;;;318    		write_addr += BLOCK_SIZE;
;;;319    		read_addr += BLOCK_SIZE;
;;;320    	
;;;321    	}
;;;322    	//bim_uart_write("udi_updata_backup_to_image_sec end\r\n");
;;;323    }	
000286  bd7f              POP      {r0-r6,pc}
;;;324    
                          ENDP

                  bim_select_sec PROC
;;;325    				
;;;326    uint8_t bim_select_sec(void)
000288  b510              PUSH     {r4,lr}
;;;327    {
;;;328    	uint8_t bsec_status;
;;;329    	uint8_t status = 0;
00028a  2400              MOVS     r4,#0
;;;330    	bsec_status = bim_check_backup_sec_status();
00028c  f7fffffe          BL       bim_check_backup_sec_status
;;;331    
;;;332    	switch(bsec_status)
000290  2800              CMP      r0,#0
000292  d006              BEQ      |L1.674|
000294  2801              CMP      r0,#1
000296  d012              BEQ      |L1.702|
000298  2802              CMP      r0,#2
00029a  d00e              BEQ      |L1.698|
00029c  2804              CMP      r0,#4
00029e  d10e              BNE      |L1.702|
0002a0  e00f              B        |L1.706|
                  |L1.674|
;;;333    	{
;;;334    		case SSTATUS_SECT_NORMAL: // 1:I NORMAL ,B NORMAL,updata B -> I,RUN I 
;;;335    		{	
;;;336                bim_erase_image_sec();
0002a2  f7fffffe          BL       bim_erase_image_sec
;;;337                bim_updata_backup_to_image_sec();
0002a6  f7fffffe          BL       bim_updata_backup_to_image_sec
;;;338                if(SSTATUS_SECT_NORMAL == bim_check_image_sec_status())
0002aa  f7fffffe          BL       bim_check_image_sec_status
0002ae  2800              CMP      r0,#0
0002b0  d003              BEQ      |L1.698|
;;;339                {
;;;340                    bim_erase_backup_sec();
;;;341                    status = 1;
;;;342                }
;;;343                else
;;;344                {
;;;345                    bim_wdt_enable(100);//reset
0002b2  2064              MOVS     r0,#0x64
0002b4  f7fffffe          BL       bim_wdt_enable
0002b8  e006              B        |L1.712|
                  |L1.698|
0002ba  f7fffffe          BL       bim_erase_backup_sec
                  |L1.702|
;;;346                } 
;;;347                //bim_uart_write("TYPE = 1\r\n");
;;;348    		}break;
;;;349    		
;;;350    		case SSTATUS_SECT_ABNORMAL://://2     :I NORMAL,B ABNORMAL ,ERASE B,RUN I
;;;351    		{
;;;352    			bim_erase_backup_sec();
;;;353    			status = 1;
;;;354    			//bim_uart_write("TYPE = 2\r\n");
;;;355                
;;;356    		}break;
;;;357    		
;;;358    		case SSTATUS_SECT_ERASED://://3:I NORMAL,B ERASED,RUN I
;;;359    		{
;;;360    			status = 1;
0002be  2401              MOVS     r4,#1
;;;361    			//bim_uart_write("TYPE = 3\r\n");
;;;362    		}break;
0002c0  e002              B        |L1.712|
                  |L1.706|
;;;363    		
;;;364    		case SSTATUS_SECT_DIFF_ROM_VER:////4:I DIFF_ROM,B ERASED,NOT HAPPEN
;;;365    		{
;;;366    			status = 1;
0002c2  2401              MOVS     r4,#1
;;;367    			bim_erase_backup_sec();
0002c4  f7fffffe          BL       bim_erase_backup_sec
                  |L1.712|
;;;368    			//bim_uart_write("TYPE = 4 SSTATUS_SECT_DIFF_ROM_VER\r\n");
;;;369    		}break;
;;;370    		
;;;371    		default:
;;;372            {
;;;373    			status = 1;
;;;374    			//bim_erase_backup_sec();
;;;375    			//bim_uart_write(" SSTATUS_SECT_UNKOWN\r\n");
;;;376            }break;				
;;;377    	}
;;;378    	return status ;
0002c8  0020              MOVS     r0,r4
;;;379    }
0002ca  bd10              POP      {r4,pc}
;;;380    
                          ENDP

                  |L1.716|
                          DCD      ||.bss||+0x10
                  |L1.720|
                          DCD      0x42424242
                  |L1.724|
                          DCD      0x00010410
                  |L1.728|
                          DCD      0x0001b810
                  |L1.732|
                          DCD      0x00004104
                  |L1.736|
                          DCD      0x0000ffff
                  |L1.740|
                          DCD      0x00002cc3

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hdr_img
                          %        16
                  hdr_back
                          %        16
